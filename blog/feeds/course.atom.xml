<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>KMOLab 機械設計工程 - Course</title><link href="https://kmolab.github.io/blog/" rel="alternate"></link><link href="https://kmolab.github.io/blog/feeds/course.atom.xml" rel="self"></link><id>https://kmolab.github.io/blog/</id><updated>2017-07-06T12:00:00+08:00</updated><entry><title>計算機程式與電腦輔助設計實習</title><link href="https://kmolab.github.io/blog/2017fall-cp-cadp.html" rel="alternate"></link><published>2017-07-06T12:00:00+08:00</published><updated>2017-07-06T12:00:00+08:00</updated><author><name>yen</name></author><id>tag:kmolab.github.io,2017-07-06:/blog/2017fall-cp-cadp.html</id><summary type="html">&lt;p&gt;以下為 Brython 網際程式環境.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;以下為 Brython 網際程式環境.&lt;/p&gt;


&lt;!-- 導入 Brython 標準程式庫 --&gt;

&lt;script src="./../data/Brython-3.3.1/brython.js"&gt;&lt;/script&gt;

&lt;script src="./../data/Brython-3.3.1/brython_stdlib.js"&gt;&lt;/script&gt;

&lt;!-- 啟動 Brython --&gt;

&lt;script&gt;
window.onload=function(){
// 設定 data/py 為共用程式路徑
brython({debug:1, pythonpath:['./../data/py']});
}
&lt;/script&gt;

&lt;p&gt;投影片:&lt;/p&gt;

&lt;div id="container1"&gt;&lt;/div&gt;

&lt;script type="text/python3"&gt;
from browser import document, html
container1 = document['container1']
adata = open("./../data/1a_list.txt").read()
alist = adata.splitlines()
n = 0
for stud_num in alist:
    mlink = html.A(stud_num, href="http://s"+str(stud_num)+".github.io/2017springwcm_hw")
    mlink += " | "
    n = n +1
    if n%8 == 0:
        mlink += html.BR()
    container1 &lt;= mlink
&lt;/script&gt;

&lt;!-- 在 blog 中引用圖檔, 只要往外跳一層即可跳出 blog 目錄 --&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
&lt;img src="./../data/logo/kmol_1172x340_blue_3yrs.png" width="300"&gt;&lt;/img&gt;&lt;/p&gt;</content><category term="Final"></category></entry><entry><title>網際內容管理</title><link href="https://kmolab.github.io/blog/wcm-course-1.html" rel="alternate"></link><published>2017-06-18T13:00:00+08:00</published><updated>2017-06-18T13:00:00+08:00</updated><author><name>kmol</name></author><id>tag:kmolab.github.io,2017-06-18:/blog/wcm-course-1.html</id><summary type="html">&lt;p&gt;網際內容管理課程在教導學生, 利用電腦與網路軟硬體配置, 完成各項與機械設計內容管理有關的任務.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;網際內容管理課程在教導學生, 利用電腦與網路軟硬體配置, 完成各項與機械設計內容管理有關的任務.&lt;/p&gt;


&lt;p&gt;所謂網際指的是 Web-Based, 也就是 World-Wide-Web Based 的簡稱, 中文也可以翻為"植基於全球資訊網" 或 "以全球資訊網為基礎", 其內涵是希望讓使用者在網際網路 (Internet) 的基礎上, 利用 Web Browser (瀏覽器) 操作各種與機械設計內容管理有關的任務.&lt;/p&gt;
&lt;h3&gt;Ubuntu 操作系統&lt;/h3&gt;
&lt;p&gt;根據 https://www.ubuntu.com/info/release-end-of-life 的生命週期年限, 選擇 LTS Server 版本安裝, 安裝過程需要安裝 OpenSSL 模組, 以及 ubuntu-desktop, Windows 客戶端則透過 &lt;a href="https://sourceforge.net/projects/xming/"&gt;xming&lt;/a&gt; 與 &lt;a href="http://www.putty.org/"&gt;http://www.putty.org/&lt;/a&gt; 進行安全的遠端登入.&lt;/p&gt;
&lt;h3&gt;IPv4 與 IPv6 網路設定&lt;/h3&gt;
&lt;p&gt;一般來說, 只有必須擔負特定 WWW Server、DNS Server 與 Proxy Server 的主機需要同時支援 IPv4 與 IPv6 網路協定外, 其餘客戶端都可以只透過 IPv6 網路協定上網.&lt;/p&gt;
&lt;p&gt;WWW Server 使用 Nginx, DNS Serve 使用 Bind, 而 Proxy Server 則使用 Squid.&lt;/p&gt;
&lt;h3&gt;Nginx&lt;/h3&gt;
&lt;p&gt;Nginx WWW 伺服器通常用來伺服靜態文件或者作為其他近端伺服資料傳送的代理主機 (例如, uwsgi 網際服務).&lt;/p&gt;
&lt;h3&gt;Ethercalc&lt;/h3&gt;
&lt;p&gt;Ethercalc 允許多人利用瀏覽器同時維護一份線上試算表, 可以用於協同資料永久存檔前的轉介站.&lt;/p&gt;
&lt;h3&gt;Fossil SCM&lt;/h3&gt;
&lt;p&gt;Fossil SCM 是一套小而美的分散式資料管理系統&lt;/p&gt;
&lt;h3&gt;Squid Proxy Server&lt;/h3&gt;
&lt;p&gt;在 IPv4 轉換到 IPv6 的過程中, 雙網路協定支援的代理主機扮演非常重要的角色, 例如, 從純 IPv4 瀏覽器連線到純 IPv6 WWW 伺服器, 就需要透過雙網路協定的代理主機轉介資料, 其次 putty ssh 遠端登入或 sftp 安全資料傳送, 也都需要雙網路支援的代理主機居中轉換不同協定資料.&lt;/p&gt;
&lt;h3&gt;X-windows&lt;/h3&gt;
&lt;h3&gt;Putty&lt;/h3&gt;
&lt;h3&gt;Leo Editor&lt;/h3&gt;
&lt;h3&gt;Filezilla 與 SFTP&lt;/h3&gt;
&lt;h3&gt;Uwsgi 與 CMSimfly&lt;/h3&gt;</content><category term="網際內容管理"></category><category term="課程"></category></entry><entry><title>協同產品設計實習</title><link href="https://kmolab.github.io/blog/cd-course-1.html" rel="alternate"></link><published>2017-06-18T12:00:00+08:00</published><updated>2017-06-18T12:00:00+08:00</updated><author><name>kmol</name></author><id>tag:kmolab.github.io,2017-06-18:/blog/cd-course-1.html</id><summary type="html">&lt;p&gt;協同產品設計課程在教導學生, 以同步或非同步協同方式, 利用電腦軟體完成各項與機械設計運算與模擬流程有關的任務.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;協同產品設計課程在教導學生, 以同步或非同步協同方式, 利用電腦軟體完成各項與機械設計運算與模擬流程有關的任務.&lt;/p&gt;
</content><category term="協同產品設計實習"></category><category term="課程"></category></entry><entry><title>電腦輔助設計實習</title><link href="https://kmolab.github.io/blog/cadp-course-1.html" rel="alternate"></link><published>2017-06-18T11:00:00+08:00</published><updated>2017-06-18T11:00:00+08:00</updated><author><name>kmol</name></author><id>tag:kmolab.github.io,2017-06-18:/blog/cadp-course-1.html</id><summary type="html">&lt;p&gt;電腦輔助設計課程在教導學生利用電腦軟體完成各項與機械設計運算與模擬流程有關的任務.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;電腦輔助設計課程在教導學生利用電腦軟體完成各項與機械設計運算與模擬流程有關的任務.&lt;/p&gt;
</content><category term="電腦輔助設計實習"></category><category term="課程"></category></entry><entry><title>計算機程式</title><link href="https://kmolab.github.io/blog/cp-course-1.html" rel="alternate"></link><published>2017-06-12T11:00:00+08:00</published><updated>2017-06-12T11:00:00+08:00</updated><author><name>kmol</name></author><id>tag:kmolab.github.io,2017-06-12:/blog/cp-course-1.html</id><summary type="html">&lt;p&gt;計算機程式課程在教導學生利用電腦完成各項與機械設計流程有關的任務.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;計算機程式課程在教導學生利用電腦完成各項與機械設計流程有關的任務.&lt;/p&gt;


&lt;p&gt;首先, 看看機械設計流程會牽涉哪些任務, 所謂機械設計, 就是歷經詳細思慮考量, 完成互動元件間之精巧配置, 使其展現特定功能之具體規劃表達.&lt;/p&gt;
&lt;p&gt;換言之, 機械設計是一種具體規劃的表達 (presentation), 其內容是經過一系列詳細的思慮與考量所得到的結果, 而此項結果通常有具體的功能, 並且包含許多互動 (interaction) 元件之間的彈性與精巧配置 (flexible and sophisticated configuration).&lt;/p&gt;
&lt;p&gt;我們將上述與機械設計有關的關鍵字引列如下:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;機械設計是一種表達, 此種表達可以利用文字、口語、2D 靜態圖像、3D 或影音動態圖像、理論分析或實體呈現.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;機械設計的過程所需要的各種思慮與考量牽涉許多定性與定量的分析, 包含許多工程原理原則與實務經驗, 這些分析除了必須利用數學建立模型, 透過演算預先模擬外, 還需要使用有效率可協同的方式紀錄過程中所產生的各種資料.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;機械設計產品中所包含的各種互動元件, 包括硬體元件、流體元件、軟體元件與管理元件等.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;機械設計過程中, 為了在實體化之前能預先針對各種互動元件間的組成與配置進行最佳化, 因此需要使用各種逼真的模擬方法加以呈現.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;如何進行文字、2D&amp;amp;3D表達&lt;/h3&gt;
&lt;p&gt;有沒有一種方法可以讓多名使用者協同管理一份文件, 其中包含各種互動式圖文與影音資料, 各使用者在編修內容過程可以有效對資料進行保全, 可以有效分散備份, 可以紀錄各編修者所增刪的內容, 可以透過有效率的方法散佈此份文件的內容?&lt;/p&gt;
&lt;h3&gt;使用工具的評量方法&lt;/h3&gt;
&lt;p&gt;機械設計工程師為了有效完成具體規劃內容的表達, 過程中必須使用各種類型的工具, 其中包括:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;文字資料構建、管理與呈現的工具 (text)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;2  口語資料構建、管理與呈現的工具 (oral)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;2D 靜態圖像資料構建、管理與呈現的工具 (2d)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;3D 或影音動態圖像資料構建、管理與呈現的工具 (3d)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;理論分析資料構建、管理與呈現的工具 (analytical)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;實體構建、管理與呈現的工具 (physical)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;工具取得、維護使用成本與其他工具整合效能成本等&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;工具取得成本 (now and how)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;維護更新與永續使用成本 (update and sustainable)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;工具掌握度與整合效能成本 (integration)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Free 不只免費而是自由&lt;/h3&gt;
&lt;p&gt;免費的最貴&lt;/p&gt;
&lt;p&gt;自由的好處&lt;/p&gt;
&lt;p&gt;自由的壞處&lt;/p&gt;
&lt;h3&gt;假如修習課程是一場選秀球賽&lt;/h3&gt;
&lt;p&gt;選秀過程分為上下兩個半場, 半場結束各球員身上會有兩種標價, 一種是球員自身的評價, 另一種則是選秀主持團對各球員的評價&lt;/p&gt;
&lt;p&gt;為了有效評定各球員在選秀結束後的身價, 一開始所有球員尚未上場展示球技之前, 全部都屬於勝部組, 隨著上半場結束前, 部份球員可能因為犯規或違例而落入敗部, 敗部球員若要轉回勝部則必須額外展示球技, 例如, 若球賽為籃球, 若敗部球員可以在底線連續投入3個三分球, 就可以即刻從敗部重新回到勝部.&lt;/p&gt;
&lt;h3&gt;選秀規則&lt;/h3&gt;
&lt;p&gt;犯規: 沒能帶筆記本或在筆記本中紀錄當天的上課內容與心得者&lt;/p&gt;
&lt;p&gt;犯規: 每週分組賽結束後, 各組員未能有效陳述該場球賽過程者&lt;/p&gt;
&lt;p&gt;犯規: 在電腦教室中用餐或喝開水之外的飲料者&lt;/p&gt;
&lt;p&gt;三次犯規 = 一次違例&lt;/p&gt;
&lt;p&gt;違例: 分組球賽開始, 裁判已經追哨後, 仍然找不到球員&lt;/p&gt;
&lt;p&gt;違例: 分組球賽進行中, 暫停休息時間結束後, 仍然找不到球員&lt;/p&gt;
&lt;p&gt;兩次違例 = 落入敗部&lt;/p&gt;
&lt;p&gt;在底線連續投入3個三分球, 可以從敗部回到勝部&lt;/p&gt;
&lt;p&gt;上下半場持續在敗部的球員 = 身價低於 60 吉格幣&lt;/p&gt;
&lt;h3&gt;一定要學 C&lt;/h3&gt;
&lt;p&gt;C 是為建立 Unix 操作系統而生的程式語言, 也是近代許多高階程式語言建構的基礎, 例如, 最早的 C 程式編譯器雖然採用組合語言編寫, 但是隨後的 C 程式編譯器則可以採用舊版的 C 來編譯, 而 Python 解譯器在 1980 年代晚期出現時, 就是以 C 程式編寫, 之後雖然有採用 Java 編寫的 Jython (2001), 以 C# 編寫的 IronPython (2006), 以 RPython 編寫的 PyPy (2007), 以 Javascript 編寫的 Brython (2012), 但是 CPython 仍然是最通用的版本.&lt;/p&gt;
&lt;p&gt;儘管 C 程式語言對於工程師而言非常重要, 但是 C 或更進階的 C++ 程式語言的學習並不容易, 並不只是因為 C/C++ 擁有指標, 能夠控制電腦的底層記憶體, 而是因為 C/C++ 程式語言所涵蓋的應用非常廣.&lt;/p&gt;
&lt;p&gt;但是無論如何, 工程師一定要學會基本的  C 程式語言, 倒是毋庸置疑.&lt;/p&gt;</content><category term="計算機程式"></category><category term="課程"></category></entry></feed>