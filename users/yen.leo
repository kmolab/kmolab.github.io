<?xml version="1.0" encoding="utf-8"?>
<!-- Created by Leo: http://leoeditor.com/leo_toc.html -->
<leo_file xmlns:leo="http://leoeditor.com/namespaces/leo-python-editor/1.1" >
<leo_header file_format="2" tnodes="0" max_tnode_index="0" clone_windows="0"/>
<globals body_outline_ratio="0.5" body_secondary_ratio="0.5">
	<global_window_position top="50" left="50" height="500" width="700"/>
	<global_log_window_position top="0" left="0" height="0" width="0"/>
</globals>
<preferences/>
<find_panel_settings/>
<vnodes>
<v t="yen.20170108171605.1"><vh>@settings</vh>
<v t="yen.20170108171605.2"><vh>@data qt-gui-plugin-style-sheet</vh></v>
<v t="yen.20170108171605.3"><vh>@string initial_split_orientation = horizontal</vh></v>
</v>
<v t="yen.20170108171622.1"><vh>有關 kmolab.github.io</vh></v>
<v t="leo.20180115141411.1"><vh>20180115 重整內容</vh></v>
<v t="yen.20170108171733.1" a="E"><vh>@path ../</vh>
<v t="leo.20180120152237.1"><vh>@edit CNAME</vh></v>
<v t="leo.20180115150519.1"><vh>@edit index.html</vh></v>
<v t="leo.20170706005043.1"><vh>@clean index_reveal.html</vh>
<v t="leo.20170706005043.2" a="E"><vh>html</vh>
<v t="leo.20170706005043.3"><vh>head</vh></v>
<v t="leo.20170706005043.4" a="E"><vh>body</vh>
<v t="leo.20170706005043.5" a="E"><vh>reveal div</vh>
<v t="leo.20170706005043.6" a="E"><vh>slides div</vh>
<v t="leo.20170706005043.7"><vh>封面投影片</vh>
<v t="leo.20170706005043.8"><vh>封面投影片內容</vh></v>
</v>
<v t="leo.20170706005043.9"><vh>快捷鍵</vh>
<v t="leo.20170706005043.10"><vh>投影片快捷鍵</vh></v>
</v>
<v t="leo.20170706005043.11"><vh>溝通與表達</vh>
<v t="leo.20170706005043.12"><vh>溝通與表達內容</vh></v>
</v>
<v t="leo.20170820171135.1"><vh>USB隨身碟</vh>
<v t="leo.20170820171135.2"><vh>USB隨身碟內容</vh></v>
</v>
<v t="leo.20170821094649.1"><vh>筆記本隨身碟與耳機</vh>
<v t="leo.20170821094649.2"><vh>筆記本隨身碟與耳機內容</vh></v>
</v>
<v t="leo.20170821095027.1"><vh>倉儲、網誌與版次管理</vh>
<v t="leo.20170821095027.2"><vh>倉儲、網誌與版次管理內容</vh></v>
</v>
<v t="leo.20170825230412.1"><vh>課程相關系統</vh>
<v t="leo.20170825230412.2"><vh>課程相關系統內容</vh></v>
</v>
<v t="leo.20170821095406.1"><vh>Leo Editor 與 Pelican</vh>
<v t="leo.20170821095406.2"><vh>Leo Editor 與 Pelican 內容</vh></v>
</v>
<v t="leo.20170821095622.1"><vh>Git 與 Github</vh>
<v t="leo.20170821095622.2"><vh>Git 與 Github 內容</vh></v>
</v>
<v t="leo.20170821100226.1"><vh>Why Version Control</vh>
<v t="leo.20170821100226.2"><vh>Why Version Control 內容</vh></v>
</v>
<v t="leo.20170706005043.13"><vh>各式內容引用範例</vh>
<v t="leo.20170706005043.14"><vh>導入數學符號與方程式</vh>
<v t="leo.20170706005043.15"><vh>LaTeX 格式方程式</vh></v>
</v>
<v t="leo.20170706005043.16"><vh>導入縮排程式碼</vh>
<v t="leo.20170706005043.17"><vh>引用程式碼</vh></v>
</v>
<v t="leo.20170706005043.18"><vh>導入影片</vh>
<v t="leo.20170706005043.19"><vh>iframe 導入影片</vh></v>
</v>
</v>
</v>
</v>
</v>
</v>
</v>
<v t="yen.20170108171733.3"><vh>@edit README.md</vh></v>
<v t="yen.20170108171733.4"><vh>@edit .gitignore</vh></v>
<v t="leo.20170908162839.1" a="E"><vh>沒有 disqus 論壇</vh>
<v t="yen.20170108171733.2"><vh>@button local-blog</vh></v>
</v>
<v t="leo.20170908162904.1" a="E"><vh>有 disqus 論壇</vh>
<v t="leo.20170709224430.1"><vh>@button github-blog</vh></v>
</v>
<v t="leo.20170710021233.1" a="E"><vh>@path slides</vh>
<v t="leo.20170710021247.1" a="E"><vh>@clean template_slide.html</vh>
<v t="leo.20170710021247.2" a="E"><vh>html</vh>
<v t="leo.20170710021247.3"><vh>head</vh></v>
<v t="leo.20170710021247.4"><vh>body</vh>
<v t="leo.20170710021247.5"><vh>reveal div</vh>
<v t="leo.20170710021247.6"><vh>slides div</vh>
<v t="leo.20170710021247.7"><vh>封面投影片</vh>
<v t="leo.20170710021247.8"><vh>封面投影片內容</vh></v>
</v>
<v t="leo.20170710021247.9"><vh>快捷鍵</vh>
<v t="leo.20170710021247.10"><vh>投影片快捷鍵</vh></v>
</v>
<v t="leo.20170710021247.11"><vh>溝通與表達</vh>
<v t="leo.20170710021247.12"><vh>溝通與表達內容</vh></v>
</v>
<v t="leo.20170710021247.13"><vh>各式內容引用範例</vh>
<v t="leo.20170710021247.14"><vh>導入數學符號與方程式</vh>
<v t="leo.20170710021247.15"><vh>LaTeX 格式方程式</vh></v>
</v>
<v t="leo.20170710021247.16"><vh>導入縮排程式碼</vh>
<v t="leo.20170710021247.17"><vh>引用程式碼</vh></v>
</v>
<v t="leo.20170710021247.18"><vh>導入影片</vh>
<v t="leo.20170710021247.19"><vh>iframe 導入影片</vh></v>
</v>
</v>
</v>
</v>
</v>
</v>
</v>
</v>
<v t="yen.20170108171733.5" a="E"><vh>Pelican 設定</vh>
<v t="leo.20170709020600.1"><vh>共用</vh></v>
<v t="yen.20170108171733.7"><vh>@edit pelicanconf.py</vh></v>
<v t="leo.20170709015947.1"><vh>遠端</vh></v>
<v t="leo.20170709015955.1"><vh>@edit publishconf.py</vh></v>
<v t="leo.20170709015940.1"><vh>近端</vh></v>
<v t="yen.20170108171733.6"><vh>@edit local_publishconf.py</vh></v>
</v>
<v t="yen.20170224232341.1" a="E"><vh>編輯 template</vh>
<v t="leo.20180115093448.1" a="E"><vh>@path theme/attila/templates</vh>
<v t="leo.20180115093536.1"><vh>@edit base.html</vh></v>
<v t="leo.20180115093657.1"><vh>@edit search.html</vh></v>
<v t="leo.20180115093715.1"><vh>@edit archives.html</vh></v>
<v t="leo.20180115093726.1" a="E"><vh>@path partials</vh>
<v t="leo.20180115093749.1"><vh>@edit navigation.html</vh></v>
</v>
<v t="leo.20180115142025.1"><vh>保留之前舊的設定檔案</vh></v>
</v>
<v t="yen.20170224232341.2" a="E"><vh>@path theme/pelican-bootstrap3_local/templates</vh>
<v t="yen.20170224232341.3"><vh>@edit base.html</vh></v>
</v>
<v t="leo.20170710015301.1" a="E"><vh>@path theme/pelican-bootstrap3/templates</vh>
<v t="leo.20170710015311.1"><vh>@edit search.html</vh></v>
<v t="leo.20170710095845.1"><vh>@edit base.html</vh></v>
<v t="leo.20170710101854.1"><vh>@edit article.html</vh></v>
</v>
</v>
<v t="leo.20170710015511.1" a="E"><vh>編輯 plugin</vh>
<v t="leo.20170710015523.1" a="E"><vh>@path plugin</vh>
<v t="leo.20170710015523.2" a="E"><vh>@path tipue_search</vh>
<v t="leo.20170710015523.3"><vh>@edit tipue_search.py</vh></v>
</v>
</v>
</v>
<v t="yen.20170108171733.71" a="E"><vh>@path content</vh>
<v t="leo.20170710162557.1" a="E"><vh>軟硬體設置</vh>
<v t="leo.20170706020010.1"><vh>@edit 20170605-1.md</vh></v>
</v>
<v t="leo.20170710162546.1" a="E"><vh>電腦模擬</vh>
<v t="leo.20170706015402.1"><vh>@edit 20170605-2.md</vh></v>
</v>
<v t="leo.20170710162534.1" a="E"><vh>實作</vh>
<v t="leo.20170706020035.1"><vh>@edit 20170605-3.md</vh></v>
</v>
<v t="leo.20170710162521.1" a="E"><vh>其他</vh>
<v t="leo.20170706020044.1"><vh>@edit 20170605-4.md</vh></v>
</v>
<v t="leo.20170710162500.1" a="E"><vh>大學生為何不來上課?</vh>
<v t="leo.20170706020055.1"><vh>@edit 20170605-5.md</vh></v>
</v>
<v t="leo.20170710162358.1" a="E"><vh>計算機程式</vh>
<v t="leo.20170706020102.1"><vh>@edit 20170612-1.md</vh></v>
</v>
<v t="leo.20170710162347.1" a="E"><vh>電腦輔助設計實習</vh>
<v t="leo.20170706020111.1"><vh>@edit 20170618-1.md</vh></v>
</v>
<v t="leo.20170710162330.1" a="E"><vh>協同產品設計實習</vh>
<v t="leo.20170706020122.1"><vh>@edit 20170618-2.md</vh></v>
<v t="leo.20170710162608.1"><vh>網際內容管理</vh></v>
<v t="leo.20170706020211.1"><vh>@edit 20170618-3.md</vh></v>
</v>
<v t="yen.20170108171733.81" a="E"><vh>@path pages</vh>
<v t="yen.20170108171733.82"><vh>@edit pages_1.md</vh></v>
</v>
</v>
<v t="leo.20170710022054.1"><vh>可以另建節點存放 content 目錄下的 md 檔案</vh></v>
<v t="leo.20170710022041.1" a="E"><vh>@path content</vh>
<v t="leo.20170710162623.1" a="E"><vh>計算機程式與電腦輔助設計實習</vh>
<v t="leo.20170710022207.1"><vh>@edit 20170618.md</vh></v>
</v>
<v t="leo.20170710225031.1" a="E"><vh>2015 Fall CADP W16</vh>
<v t="leo.20170710225034.1"><vh>@edit 20170710.md</vh></v>
</v>
<v t="leo.20170714000548.1" a="E"><vh>Create a multi-repository Fossil Server</vh>
<v t="leo.20170714000620.1"><vh>@edit 20170714.md</vh></v>
</v>
<v t="yen.20170731134418.1" a="E"><vh>PyQt5 calculator</vh>
<v t="yen.20170731134425.1"><vh>@edit 20170731.md</vh></v>
</v>
<v t="leo.20170826070114.1" a="E"><vh>免費試吃終將結束</vh>
<v t="leo.20170826070147.1"><vh>@edit 20170826.md</vh></v>
</v>
<v t="leo.20170901235244.1" a="E"><vh>2017 Fall 即將開學</vh>
<v t="leo.20170901235304.1"><vh>@edit 20170901.md</vh></v>
</v>
<v t="leo.20170916092621.1" a="E"><vh>2017 主機設定</vh>
<v t="leo.20170916092636.1"><vh>@edit 20170916.md</vh></v>
</v>
<v t="leo.20171001091537.1" a="E"><vh>CMSimfly 與 Fossil SCM 同在</vh>
<v t="leo.20171001091610.1"><vh>@edit 20171001.md</vh></v>
</v>
<v t="leo.20171025093610.1" a="E"><vh>Brython 3.3.4 程式環境</vh>
<v t="leo.20171025093640.1"><vh>@edit 20171017.md</vh></v>
</v>
<v t="leo.20171025164948.1" a="E"><vh>Cango 繪圖</vh>
<v t="leo.20171025164953.1"><vh>@edit 20171025.md</vh></v>
</v>
<v t="leo.20180115115910.1" a="E"><vh>2018</vh>
<v t="leo.20180115115914.1"><vh>@edit 20180115.md</vh></v>
<v t="leo.20180119215813.1"><vh>@edit 20180119.md</vh></v>
<v t="leo.20180120145336.1"><vh>@edit 20180120.md</vh></v>
</v>
</v>
<v t="yen.20170108171733.83"><vh>產生 .key 與 .crt 指令</vh></v>
</v>
<v t="yen.20170108171930.1"><vh>@button https server</vh></v>
<v t="yen.20170108171939.1"><vh>@button ipv6 https server</vh></v>
<v t="leo.20170710022428.1"><vh>Git 操作</vh>
<v t="leo.20170710022851.1"><vh>github pages</vh></v>
</v>
<v t="leo.20170706003834.1" a="E"><vh>Pelican 與版次管理</vh>
<v t="leo.20170820195907.1"><vh>加入  table style</vh></v>
<v t="leo.20170826232701.1"><vh>以 Fossil SCM 伺服 pelican blog</vh></v>
</v>
<v t="leo.20170709091423.1"><vh>Fossil SCM 檔案格式</vh></v>
<v t="leo.20170710000725.1"><vh>近端的 Fossil 與遠端的 Github</vh></v>
<v t="leo.20170821120412.1"><vh>修正錯誤</vh>
<v t="leo.20170827171251.1"><vh>kivy 抱怨無 sdl2</vh>
<v t="leo.20170827174034.1"><vh>kivy pong example</vh>
<v t="leo.20170827174103.1"><vh>pong.kv</vh></v>
</v>
</v>
</v>
<v t="leo.20170825231742.1"><vh>Blender </vh>
<v t="leo.20170825231752.1"><vh>script examples</vh></v>
</v>
<v t="leo.20170826090335.1"><vh>Fossil SCM</vh>
<v t="leo.20170826090342.1"><vh>start.bat</vh></v>
<v t="leo.20170826090407.1"><vh>setup_proxy.reg</vh></v>
<v t="leo.20170826090433.1"><vh>disable_proxy.reg</vh></v>
<v t="leo.20170826090505.1"><vh>stop.bat</vh></v>
</v>
<v t="leo.20170826223628.1" a="E"><vh>如何成為一位傑出工程師</vh>
<v t="leo.20170826223748.1"><vh>英文版</vh></v>
<v t="leo.20170826223640.1"><vh>中文版</vh></v>
<v t="leo.20170826225423.1"><vh>Street Smart</vh></v>
</v>
</vnodes>
<tnodes>
<t tx="leo.20170706003834.1">只需要管理 Pelican 有關的設定檔案與 .md 檔案, 其餘都只保留最新檔案即可?

至於 __FOSSIL__ 檔案是否納入 git 版次管理??</t>
<t tx="leo.20170706005043.1">@language xml
@tabwidth -4
@others

</t>
<t tx="leo.20170706005043.10"># 投影片快捷鍵

* 利用箭頭上下前後換頁
* 按 f 鍵進入全螢幕模式 (full screen)
* 按 s 鍵可以顯示投影片筆記 (show)
* 按 o 鍵可以切換單張或全域檢視 (overview)
* 按 b 或 . 鍵可以切換螢幕黑屏 (black)
* 按 Esc 可以退出全螢幕或全域檢視 (Escape)

</t>
<t tx="leo.20170706005043.11">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;


						
</t>
<t tx="leo.20170706005043.12"># 溝通與表達

* 溝通 communication
* 表達 presentation
* 如何溝通?
* 如何表達?
* 溝通才能彼此建立共識
* 表達才能讓人體察內容

</t>
<t tx="leo.20170706005043.13">&lt;section&gt;
@others
&lt;/section&gt;

</t>
<t tx="leo.20170706005043.14">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
&lt;!-- 請注意, @others 不可以內縮 --&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;



						
</t>
<t tx="leo.20170706005043.15"># 數學符號與方程式

Inline math equations go in like so: $\omega = d\phi / dt$. Display
math should get its own line and be put in in double-dollarsigns:

$$I = \int \rho R^{2} dV$$
</t>
<t tx="leo.20170706005043.16">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
&lt;!-- 請注意, @others 不可以內縮 --&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;



						
</t>
<t tx="leo.20170706005043.17">## 利用 Markdown 寫投影片
以下利用 Markdown 格式展示 Python 程式碼:
```
@language python
# use threading and subprocess to threading the make process
import os
import subprocess
import threading

def domake():
    
    path = "../exposed/api/exposed"
    ubuntu = "../Ubuntu"
    
    # create obj path
    
    if not os.path.exists(path+"/../obj"):
        os.makedirs(path+"/../obj")
    
    subprocess.call(["make", "clean"], cwd=path)
    subprocess.call("make", cwd=path)
    subprocess.call(["cp", "{libslvs.so, _slvs.so, slvs.py}", ubuntu], cwd=path)
    subprocess.call(["python3", "circle_ex.py"], cwd=path+"/"+ubuntu)
    
make = threading.Thread(target=domake)
make.start()
```
</t>
<t tx="leo.20170706005043.18">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;


						
</t>
<t tx="leo.20170706005043.19">## 使用 iframe 導入影片

### 導入影片 template

&lt;iframe src="https://player.vimeo.com/video/183950627" width="640" height="492" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;
</t>
<t tx="leo.20170706005043.2">&lt;!doctype html&gt;
&lt;html lang="en"&gt;
@others
&lt;/html&gt;
</t>
<t tx="leo.20170706005043.3">&lt;head&gt;
    &lt;meta charset="utf-8"&gt;
&lt;title&gt;
KMOLab 機械設計工程
&lt;/title&gt;
    &lt;meta name="description" content="A framework for easily creating beautiful presentations using HTML"&gt;
    &lt;meta name="author" content="Hakim El Hattab"&gt;
    
    &lt;meta name="apple-mobile-web-app-capable" content="yes"&gt;
    &lt;meta name="apple-mobile-web-app-status-bar-style" content="black-translucent"&gt;
    
    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"&gt;
    
    &lt;link rel="stylesheet" href="data/reveal.js/css/reveal.css"&gt;
    &lt;link rel="stylesheet" href="data/reveal.js/css/theme/black.css" id="theme"&gt;
    
    &lt;!-- Theme used for syntax 'ing of code --&gt;
    &lt;link rel="stylesheet" href="data/reveal.js/lib/css/zenburn.css"&gt;

    &lt;!-- Printing and PDF exports --&gt;
    &lt;script&gt;
        var link = document.createElement( 'link' );
        link.rel = 'stylesheet';
        link.type = 'text/css';
        link.href = window.location.search.match( /print-pdf/gi ) ? 'data/reveal.js/css/print/pdf.css' : 'data/reveal.js/css/print/paper.css';
        document.getElementsByTagName( 'head' )[0].appendChild( link );
    &lt;/script&gt;

    &lt;!--[if lt IE 9]&gt;
    &lt;script src="data/reveal.js/lib/js/html5shiv.js"&gt;&lt;/script&gt;
    &lt;![endif]--&gt;
&lt;/head&gt;

</t>
<t tx="leo.20170706005043.4">&lt;body&gt;
@others
&lt;script src="data/reveal.js/lib/js/head.min.js"&gt;&lt;/script&gt;
&lt;script src="data/reveal.js/js/reveal.js"&gt;&lt;/script&gt;
&lt;script&gt;
        // More info https://github.com/hakimel/reveal.js#configuration
        Reveal.initialize({
            controls: true,
            progress: true,
            history: true,
            center: true,

            transition: 'slide', // none/fade/slide/convex/concave/zoom

            // More info https://github.com/hakimel/reveal.js#dependencies
            dependencies: [
                { src: 'data/reveal.js/lib/js/classList.js', condition: function() { return !document.body.classList; } },
                { src: 'data/reveal.js/plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
                { src: 'data/reveal.js/plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
                { src: 'data/reveal.js/plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } },
                { src: 'data/reveal.js/plugin/zoom-js/zoom.js', async: true },
                { src: 'data/reveal.js/plugin/notes/notes.js', async: true },
                { src: 'data/reveal.js/plugin/math/math.js', async: true }
            ]
        });
&lt;/script&gt;
&lt;/body&gt;
</t>
<t tx="leo.20170706005043.5">&lt;div class="reveal"&gt;
@others
&lt;/div&gt;

</t>
<t tx="leo.20170706005043.6">&lt;!-- Any section element inside of this container is displayed as a slide --&gt;
&lt;div class="slides"&gt;
@others
&lt;/div&gt;

</t>
<t tx="leo.20170706005043.7">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;


						
</t>
<t tx="leo.20170706005043.8">## 2017Fall KMOL 課程

### KMOLab 機械設計工程

&lt;small&gt;
Created by KMOLab
&lt;/small&gt;

[2017Fall 課程網誌](blog/index.html)


</t>
<t tx="leo.20170706005043.9">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;


						
</t>
<t tx="leo.20170709015940.1"></t>
<t tx="leo.20170709015947.1"></t>
<t tx="leo.20170709020600.1"></t>
<t tx="leo.20170709091423.1">https://www.fossil-scm.org/xfer/doc/trunk/www/fileformat.wiki
</t>
<t tx="leo.20170709224430.1">@language python
import os

os.system("pelican content -o blog -s publishconf.py")
g.es("admin pelican Github 執行完畢")


</t>
<t tx="leo.20170710000725.1">三種類型的版次管理與協同溝通與表達

1) 近端 (區域網路下的實體或虛擬伺服器) 使用 Fossil SCM

資料在近端時可以進行各式檢視與測試

web based 伺服功能

2) 中端 (廣域網路下, 自行維護的實體或虛擬伺服器) 使用 Fossil SCM

資料在近端時可以進行各式檢視與測試

web based 伺服功能

3) 遠端使用 Github (account.github.io 或 Github Pages)

資料在近端時可以進行各式檢視與測試

資料在遠端可以利用 Github 網際介面改版, Github Pages 伺服 html + Javascript 主要儲存具完整更新歷程, 可多人協同維護的表達資料</t>
<t tx="leo.20170710015301.1"></t>
<t tx="leo.20170710015511.1"></t>
<t tx="leo.20170710015523.1"></t>
<t tx="leo.20170710015523.2"></t>
<t tx="leo.20170710021233.1"></t>
<t tx="leo.20170710021247.1">@language xml
@tabwidth -4
@others

</t>
<t tx="leo.20170710021247.10"># 投影片快捷鍵

* 利用箭頭上下前後換頁
* 按 f 鍵進入全螢幕模式 (full screen)
* 按 s 鍵可以顯示投影片筆記 (show)
* 按 o 鍵可以切換單張或全域檢視 (overview)
* 按 b 或 . 鍵可以切換螢幕黑屏 (black)
* 按 Esc 可以退出全螢幕或全域檢視 (Escape)

</t>
<t tx="leo.20170710021247.11">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;


						
</t>
<t tx="leo.20170710021247.12"># 溝通與表達

* 溝通 communication
* 表達 presentation
* 設定溝, 如何通?
* 如何表? 是否達?
* 溝通才有共識
* 表達方能了解彼此

</t>
<t tx="leo.20170710021247.13">&lt;section&gt;
@others
&lt;/section&gt;

</t>
<t tx="leo.20170710021247.14">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
&lt;!-- 請注意, @others 不可以內縮 --&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;



						
</t>
<t tx="leo.20170710021247.15"># 數學符號與方程式

Inline math equations go in like so: $\omega = d\phi / dt$. Display
math should get its own line and be put in in double-dollarsigns:

$$I = \int \rho R^{2} dV$$
</t>
<t tx="leo.20170710021247.16">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
&lt;!-- 請注意, @others 不可以內縮 --&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;



						
</t>
<t tx="leo.20170710021247.17">## 利用 Markdown 寫投影片
以下利用 Markdown 格式展示 Python 程式碼:
```
@language python
# use threading and subprocess to threading the make process
import os
import subprocess
import threading

def domake():
    
    path = "../exposed/api/exposed"
    ubuntu = "../Ubuntu"
    
    # create obj path
    
    if not os.path.exists(path+"/../obj"):
        os.makedirs(path+"/../obj")
    
    subprocess.call(["make", "clean"], cwd=path)
    subprocess.call("make", cwd=path)
    subprocess.call(["cp", "{libslvs.so, _slvs.so, slvs.py}", ubuntu], cwd=path)
    subprocess.call(["python3", "circle_ex.py"], cwd=path+"/"+ubuntu)
    
make = threading.Thread(target=domake)
make.start()
```
</t>
<t tx="leo.20170710021247.18">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;


						
</t>
<t tx="leo.20170710021247.19">## 使用 iframe 導入影片

### 導入影片 template

&lt;iframe src="https://player.vimeo.com/video/183950627" width="640" height="492" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;
</t>
<t tx="leo.20170710021247.2">&lt;!doctype html&gt;
&lt;html lang="en"&gt;
@others
&lt;/html&gt;
</t>
<t tx="leo.20170710021247.3">&lt;head&gt;
    &lt;meta charset="utf-8"&gt;
&lt;title&gt;
KMOLab 機械設計工程
&lt;/title&gt;
    &lt;meta name="description" content="A framework for easily creating beautiful presentations using HTML"&gt;
    &lt;meta name="author" content="Hakim El Hattab"&gt;
    
    &lt;meta name="apple-mobile-web-app-capable" content="yes"&gt;
    &lt;meta name="apple-mobile-web-app-status-bar-style" content="black-translucent"&gt;
    
    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"&gt;
    
    &lt;link rel="stylesheet" href="./../data/reveal.js/css/reveal.css"&gt;
    &lt;link rel="stylesheet" href="./../data/reveal.js/css/theme/black.css" id="theme"&gt;
    
    &lt;!-- Theme used for syntax highlighting of code --&gt;
    &lt;link rel="stylesheet" href="./../data/reveal.js/lib/css/zenburn.css"&gt;

    &lt;!-- Printing and PDF exports --&gt;
    &lt;script&gt;
        var link = document.createElement( 'link' );
        link.rel = 'stylesheet';
        link.type = 'text/css';
        link.href = window.location.search.match( /print-pdf/gi ) ? './../data/reveal.js/css/print/pdf.css' : './../data/reveal.js/css/print/paper.css';
        document.getElementsByTagName( 'head' )[0].appendChild( link );
    &lt;/script&gt;

    &lt;!--[if lt IE 9]&gt;
    &lt;script src="./../data/reveal.js/lib/js/html5shiv.js"&gt;&lt;/script&gt;
    &lt;![endif]--&gt;
&lt;/head&gt;

</t>
<t tx="leo.20170710021247.4">&lt;body&gt;
@others
&lt;script src="./../data/reveal.js/lib/js/head.min.js"&gt;&lt;/script&gt;
&lt;script src="./../data/reveal.js/js/reveal.js"&gt;&lt;/script&gt;
&lt;script&gt;
        // More info https://github.com/hakimel/reveal.js#configuration
        Reveal.initialize({
            controls: true,
            progress: true,
            history: true,
            center: true,

            transition: 'slide', // none/fade/slide/convex/concave/zoom

            // More info https://github.com/hakimel/reveal.js#dependencies
            dependencies: [
                { src: './../data/reveal.js/lib/js/classList.js', condition: function() { return !document.body.classList; } },
                { src: './../data/reveal.js/plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
                { src: './../data/reveal.js/plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
                { src: './../data/reveal.js/plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } },
                { src: './../data/reveal.js/plugin/zoom-js/zoom.js', async: true },
                { src: './../data/reveal.js/plugin/notes/notes.js', async: true },
                { src: './../data/reveal.js/plugin/math/math.js', async: true }
            ]
        });
&lt;/script&gt;
&lt;/body&gt;
</t>
<t tx="leo.20170710021247.5">&lt;div class="reveal"&gt;
@others
&lt;/div&gt;

</t>
<t tx="leo.20170710021247.6">&lt;!-- Any section element inside of this container is displayed as a slide --&gt;
&lt;div class="slides"&gt;
@others
&lt;/div&gt;

</t>
<t tx="leo.20170710021247.7">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;


						
</t>
<t tx="leo.20170710021247.8">## KMOL 課程

### KMOLab 機械設計工程

&lt;small&gt;
Created by KMOLab
&lt;/small&gt;

[2017Fall 課程網誌](./../blog/index.html)


</t>
<t tx="leo.20170710021247.9">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;


						
</t>
<t tx="leo.20170710022041.1"></t>
<t tx="leo.20170710022054.1"></t>
<t tx="leo.20170710022428.1">Windows 7 環境下首次使用 git command 時要求登入後, 會在

控制台-&gt;使用者帳號-&gt;使用者下建立

管理認證-&gt;一般認證

若要更換帳號, 則必須刪除後重新登入

與舊版差別, 同一台電腦只要登入一次

壞處則是若經常更換推送用戶時必須刪除認證後重新登入</t>
<t tx="leo.20170710022851.1">因為 kmolab.github.io 為帳號對應倉儲, 因此可以使用 master branch 伺服網頁

其他倉儲則只允許 gh-pages branch 伺服網頁</t>
<t tx="leo.20170710162330.1"></t>
<t tx="leo.20170710162347.1"></t>
<t tx="leo.20170710162358.1"></t>
<t tx="leo.20170710162500.1"></t>
<t tx="leo.20170710162521.1"></t>
<t tx="leo.20170710162534.1"></t>
<t tx="leo.20170710162546.1"></t>
<t tx="leo.20170710162557.1"></t>
<t tx="leo.20170710162608.1"></t>
<t tx="leo.20170710162623.1"></t>
<t tx="leo.20170710225031.1"></t>
<t tx="leo.20170714000548.1"></t>
<t tx="leo.20170820171135.1">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;


						
</t>
<t tx="leo.20170820171135.2"># 隨身碟速度 (理論頻寬)

* USB 2.0 - 480 megabits/s
* USB 3.0 - 5000 megabits/s
* Sata HD - 6000 megabits/s
* USB 3.1 - 10000 megabits/s
* SSD PCI-E - 10000 megabits/s

</t>
<t tx="leo.20170820195907.1">在 template 中的兩個 base.html 加入

&lt;style&gt;
table, td, th {    
    border: 1px solid #ddd;
    text-align: left;
}

table {
    border-collapse: collapse;
    width: 100%;
}

th, td {
    padding: 15px;
}
&lt;/style&gt;</t>
<t tx="leo.20170821094649.1">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;


						
</t>
<t tx="leo.20170821094649.2"># 筆記本隨身碟與耳機

* 上電腦課三樣必備物件 - 紙本筆記本、隨身碟與耳機
* 紙本筆記本 - 用來記錄眼睛所看與心裏所想的內容
* 隨身碟 - Windows 下的可攜程式環境
* 耳機 - 用來觀看有語音內容的影片


</t>
<t tx="leo.20170821095027.1">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;


						
</t>
<t tx="leo.20170821095027.2"># 倉儲、網誌與版次管理

* 倉儲 (Repository)
* 網誌 (Weblog)
* 版次管理 (Version Control)
* 協同 (Collaboration)


</t>
<t tx="leo.20170821095406.1">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;


						
</t>
<t tx="leo.20170821095406.2"># Leo Editor 與 Pelican

* SciTE Editor (Python3 and C Interpreter)
* Leo Editor (Personal Information Manager)
* Pelican (Static Weblog Generator)



</t>
<t tx="leo.20170821095622.1">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;


						
</t>
<t tx="leo.20170821095622.2"># Git 與 Github

* Git DVCS (2005)
* Github Software Development Platform (2009)
* Bitbucket 與 Fossil SCM (2010, 2006)



</t>
<t tx="leo.20170821100226.1">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;


						
</t>
<t tx="leo.20170821100226.2"># Why Version Control?

* Collaboration
* Storing Versions
* Restoring Previous Versions (Backtracking)
* Understanding What Happened
* Backup (Efficiently)

&lt;!-- 
參考資料
https://www.git-tower.com/learn/git/ebook/en/desktop-gui/basics/why-use-version-control
--&gt;



</t>
<t tx="leo.20170821120412.1">1) 在沒有連外網路的情況下

Reveal.js 缺少 css

cad-lab.github.io/cadlab_data/reveal/css/reveal.css Failed to load resource: net::ERR_INTERNET_DISCONNECTED
cad-lab.github.io/cadlab_data/reveal/css/theme/black.css Failed to load resource: net::ERR_INTERNET_DISCONNECTED
cad-lab.github.io/cadlab_data/reveal/lib/css/zenburn.css Failed to load resource: net::ERR_INTERNET_DISCONNECTED
head.min.js Failed to load resource: net::ERR_INTERNET_DISCONNECTED
reveal.js Failed to load resource: net::ERR_INTERNET_DISCONNECTED
localhost/:259 Uncaught ReferenceError: Reveal is not defined
    at localhost/:259
cad-lab.github.io/cadlab_data/reveal/css/print/paper.css Failed to load resource: net::ERR_INTERNET_DISCONNECTED

1) 已經修正 https://github.com/hakimel/reveal.js/ 存到相關目錄 data 中

2) Blog 可以在 Fossil SCM 中的 files 根目錄中, 使用 doc/trunk/blog/ 連接 files 檔案版次管理中的 blog/index.html

參考: https://stackoverflow.com/questions/17452809/using-fossil-embedded-documents

參考: http://www.fossil-scm.org/index.html/doc/trunk/www/embeddeddoc.wiki

但是 About 目前採用絕對路徑連結, 必須修正
</t>
<t tx="leo.20170825230412.1">&lt;section data-markdown&gt;
    &lt;script type="text/template"&gt;
@others
    &lt;/script&gt;
&lt;/section&gt;


						
</t>
<t tx="leo.20170825230412.2"># 課程相關系統 (CAD)

* Solvespace - 簡單便捷的 3D 參數繪圖軟體
* Onshape - 全雲端 3D 參數繪圖軟體
* V-rep - 教育版免費 3D 動態系統控制與模擬軟體
* Blender - 免費和開源的 3D 創作軟體


</t>
<t tx="leo.20170825231742.1">ebooks:

Beginning Blender

https://link.springer.com/content/pdf/10.1007%2F978-1-4302-3127-1.pdf

Foundation Blender Compositing 

https://link.springer.com/content/pdf/10.1007%2F978-1-4302-1977-4.pdf

</t>
<t tx="leo.20170825231752.1"># source: https://www.youtube.com/watch?v=F-cgCXg7Z3o
import bpy
from bpy import context
from math import sin, cos, radians

cubeobject = bpy.ops.mesh.primitive_ico_sphere_add

# get cursor loc - Script Modified by SardiPax
cursor = context.scene.cursor_location

radialdist = 2.0

xsize = 0.15
ysize = 0.15
zsize = 0.15

theta = 0.0
pi_over_8 = 6.28 / 16.0

levels = -10
maxlevels = 10
divi = 2.0
inci = 0.25

while levels &lt; maxlevels:

    while theta &lt; 6.28:
           x = cursor.x + (radialdist-(levels+ 2*cos (theta+levels/divi))) * cos (theta-levels/divi)
           y = cursor.x + (radialdist-(levels+ 2*sin (theta-levels/divi))) * sin (theta-levels/divi)
           z = cursor.z+levels
           cubeobject(location=(x, y, z))
           
           bpy.ops.transform.resize(value=(xsize* cos (theta-levels/divi), ysize* cos (theta-levels/divi),  zsize* cos (theta-levels/divi)), constraint_axis=(False, False, False), constraint_orientation='GLOBAL', mirror=False, proportional='DISABLED', proportional_edit_falloff='SMOOTH', proportional_size=1, snap=False, snap_target='CLOSEST', snap_point=(0, 0, 0), snap_align=False, snap_normal=(0, 0, 0), texture_space=False, release_confirm=False)
           theta += pi_over_8

    theta = 0.0
    levels += inci

radialdist = 1.0



</t>
<t tx="leo.20170826070114.1"></t>
<t tx="leo.20170826090335.1">Configure Fossil SCM

https://www.fossil-scm.org/xfer/doc/tip/www/server.wiki</t>
<t tx="leo.20170826090342.1">REM tiny2017 主要針對初學 Python3 與 C 學員所建立
REM 近端使用 fossil 管理資料版本, 並且定時轉為 git 格式後上傳到 github
@echo off
REM 設定 y 硬碟代號與 data 目錄對應
set Disk=y
subst %Disk%: "data"
REM 設定 leo 相關對應 Home 位置
set HomePath=%Disk%:\home
set HomeDrive=%Disk%:\home
set Home=%Disk%:\home
REM 將系統 Python 程式的 io 設為 utf-8
set PYTHONIOENCODING="utf-8"
REM 將後續的指令執行, 以 %Disk% 為主
%Disk%:
REM 設定 PYTHONPATH
set PYTHONPATH=%Disk%:\python-3.5.3-embed-amd64
REM 設定 Leo 所用的編輯器
set LEO_EDITOR=%Disk%:\wscite\SciTE.exe
REM for fossil https 連線設定
set HTTPS=on
REM 指令搜尋路徑設定
set path1=%PATH%;%Disk%:;%Disk%:\python-3.5.3-embed-amd64;%Disk%:\git\bin;%Disk%:\stunnel\bin;%Disk%:\sqlite-tools;%Disk%:\python-3.5.3-embed-amd64\Scripts;%Disk%:\portablegit\bin;
set path2=c:\Windows\Microsoft.NET\Framework\v3.5;%Disk%:\python-3.5.3-embed-amd64\Lib\site-packages;
set path3="C:\Program Files (x86)\Google\Chrome\Application"
path=%path%;%path1%;%path2%;%path3%
start /MIN %Disk%:\wscite\SciTE.exe
start /MIN cmd.exe
start /MIN cmd.exe
start /MIN cmd.exe
REM 啟動 Leo 編輯器
REM %Disk%:\Miniconda3\python.exe %Disk%:\apps\launchLeo.py
REM 啟動 stunnel
start /MIN fossil.exe server -P 127.0.0.1:8080 %Disk%:\tmp\fossil_repo\vcp.fossil
REM 取得電腦 IP, 然後設定 %Disk%:/stunnel/config/stunnel.conf
for /f "delims=[] tokens=2" %%a in ('ping -4 -n 1 %ComputerName% ^| findstr [') do set NetworkIP=%%a
REM echo Network IP: %NetworkIP%
REM Saved in %Disk%:\stunnel\config\stunnel.conf
@echo off
REM 建立 stunnel.conf
@echo [https] &gt; %Disk%:\stunnel\config\stunnel.conf
REM 附加資料
@echo accept = %NetworkIP%:443 &gt;&gt; %Disk%:\stunnel\config\stunnel.conf
@echo connect = 127.0.0.1:8080 &gt;&gt; %Disk%:\stunnel\config\stunnel.conf
@echo TIMEOUTclose = 0 &gt;&gt; %Disk%:\stunnel\config\stunnel.conf
@echo cert = %Disk%:\stunnel\config\localhost.crt &gt;&gt; %Disk%:\stunnel\config\stunnel.conf
@echo key = %Disk%:\stunnel\config\localhost.key &gt;&gt; %Disk%:\stunnel\config\stunnel.conf
REM 啟動 stunnel
start /MIN stunnel.exe
REM set proxy
REG IMPORT setup_proxy.reg
REM 以 chrome 連線到 https://%NetworkIP%:443
REM chrome  --proxy-server="140.130.17.17:3128" --proxy-bypass-list="192.168.1.*;*.edu.tw" https://%NetworkIP%
chrome https://%NetworkIP% http://mde.tw https://mde2a1.kmol.info https://mde2a2.kmol.info https://vimeo.com/user24079973 http://mde.tw/2017springcd/blog/ http://mde.tw/2017springwcm/blog/ http://mde.tw/2017springvcp/blog/ http://service.mde.tw
Exit</t>
<t tx="leo.20170826090407.1">Windows Registry Editor Version 5.00
 
[HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Internet Settings] 
"MigrateProxy"=dword:00000001 
"ProxyEnable"=dword:00000001 
"ProxyHttp1.1"=dword:00000000 
"ProxyServer"="http://140.130.17.17:3128"
"ProxyOverride"="192.168.1.*;*.edu.tw"</t>
<t tx="leo.20170826090433.1">Windows Registry Editor Version 5.00
 
[HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Internet Settings] 
"ProxyEnable"=dword:00000000</t>
<t tx="leo.20170826090505.1">@echo off
set Disk=y
REM 關閉 SciTE
taskkill /IM SciTE.exe /F
REM 關閉 python
taskkill /IM python.exe /F
REM 關閉 stunnel
taskkill /IM stunnel.exe /F
REM 關閉 fossil
taskkill /IM fossil.exe /F
REM 關閉 cmd 指令視窗
taskkill /IM cmd.exe /F
REM disable proxy
%Disk%:
REG IMPORT disable_proxy.reg
REM 清除 log 資料
path=%PATH%;
REM del /Q /F  V:\tmp\*.*
REM 終止虛擬硬碟與目錄的對應
subst %Disk%: /D
REM taskkill /IM mingw32 /F
EXIT</t>
<t tx="leo.20170826223628.1"></t>
<t tx="leo.20170826223640.1">如何成為一位傑出的工程師 

How to be a Star Engineer Robert E. Kelley, Carnegie Mellon University (Robert E. Kelley, "How to be a star engineer," IEEE Spectrum, pp. 51-58, Oct. 1999.) 

翻譯：馬仕毅 

在 1985 年，我被問了一些問題,從那時起,我就開始找尋真正的答案。 

提出問題的是貝爾實驗室(那是仍然是 AT&amp;T 的一部分，現在屬於 Lucent Technologies Inc.)。貝爾實驗室由全世界最好的大學中聘用了 最優秀，最聰明的畢業生,然而, 最後只有少數的人真正發揮他們的潛 力而成為卓越的工程師。大部分的新進人員發展成可以穩定地完成任 務的執行者，生產力並沒有特別突出，無法幫助貝爾實驗室在提昇 AT&amp;T 的市場競爭力方面，做出顯著的貢獻。 

貝爾實驗室想要知道的是：傑出的工程師和普通的工程師到底有什麼 不同？ 傑出與否是由天份來決定？還是可以經由學習得來？可不可 以設計一套提昇生產力的計畫來幫助表現平平的員工成為傑出的人 才？ 不只有公司才會尋求這些問題的答案。由 1985 年開始，幾乎所有我 遇到的工程師都希望能夠增加自己的生產力。他們覺得自己也可以出 類拔萃，他們不喜歡被同事的光芒所掩蓋。因此他們不斷地努力求進 步。在現今的職場中，資源越來越少,工作的要求卻越來越多。全球 化的競爭，購併風氣,企業裁員使得每位員工所承擔的責任越來越重 大，而可利用的資源卻比以前少。環顧你的四周，和五年前比較,那 位不是比以前工作更努力，工時更長？誰不是待完成的工作一堆，好 多的電話和電子郵件還沒回？ 

大家都在暗自擔心，如果不能再提高生產力，下一個被裁員的會不會是自己？誰不希望能夠重新掌握自己 的生活-在工作和個人生活中取得一個更好的平衡點？每個人都聽 過：更聰明地工作(work smarter)，只是似乎沒人知道那是什麼意思。 

我和我的同事從那時起就開始研究公司和個人生產力的問題。來自貝 爾實驗室，3M，及惠普公司總計超過一千位工程師在這個研究的過 程中，同時扮演了研究夥伴及受試者的角色。為了瞭解傑出工程師的 秘密，我們使用了問卷調查，直接觀察，工作日記，焦點團隊(focus groups)，以及面試等方法來收集資料。並在適當的時候使用統計分 析，內容分析(content analysis)，及反覆的模型建立(iterative model building)等方法。 

許多其他的公司也都參與了這個過程，包含了以電機工程師為重心的 Analog Devices, Fore Systems, Air Touch，以及一些包含其他領域工程 師的公司如 Shell Oil, Kimberly Clark 等。這些公司採用了我們的生產 力提昇計畫。有效地將表現普通的員工轉換成傑出的工程師，而在這 個過程中，也讓我們對於產生傑出表現的關鍵因素有了更多的了解。 通往傑出之路 Lai 及 Henry 在進入貝爾實驗室時，兩人的背景近似。都是由頂尖的 大學畢業，平均成績 3.8(GPA)。都曾經在電腦公司做過暑期工讀， 而且都獲得教授的全力推薦。然而，在剛進公司的前六個月，兩人採 取了截然不同的態度來面對公司指派的工作。上午的時間，他們需要 上有關電話技術以及貝爾實驗室工作流程的課。下午的時間則參與一 些暖身計畫(break-in projects)，這是一些需要完成的次要工作，即使 是做得很差也不至於對重要的計畫造成影響。 Henry 像在寫畢業論文或是準備考試似的將自己關在辦公室中。他收 集了許多的技術文件以深入了解最新的技術進展，只有在上廁所或是
參加必要的會議時才會離開辦公室。他記得當時的想法是『最重要的 事情是：我是否可以證明給我的同事看，在技術上我真的很行』 Lai 每個下午安排的三個小時的時間來完成指派的工作以及增進技術 上的技能。一有多出來的時間，她會向其他的同事自我介紹，同時了 解一下他們正在進行的計畫。如果有同事需要幫忙或是時程的壓力很 大，她會自告奮勇要幫忙。雖然她對新的工作環境文化不熟，她的同 事們還是覺得很窩心。特別是這些本來不是她的問題。 

有一天下午，有一位同事正在和一個困難的程式奮戰，而整個軟體計 畫的時程只剩一週了。Lai 以前在修一門高等課程時學過一個新的程 式工具，她覺得應該可以應付這個程式，所以她主動提出要幫忙寫這 個程式，這樣她的同事就可以專心應付更大的計畫。另一次，有一些 複雜的軟體工具需要安裝在每個人的 PC 上。依照以前的作法，是由 每個人自己在電腦上安裝，有問題自己解決。Lai 在以前暑期工讀的 時候也曾遇過類似的狀況，她覺得由一個人來安裝這個軟體到所有的 電腦上比較合理。因此她主動建議由她來做。但是這個安裝的動作比 想像中要困難，總共需要兩週的時間。比她原先估計的四天要多出很 多。她原本可以放棄這個建議，但是她仍然將這個工作實行完成。雖 然她有好幾天必須提早到公司並且加班到很晚，才不會影響到白天的 上課及計畫的進度。 六個月之後，Henry 和 Lai 都完成了他們的技術課程以及第一個任 務。他們的計畫執行成效都被評估為良好而且具有技術上的競爭力。 實際上，Henry 的計畫成果在技術上可能要比 Lai 來的高明一些。 然而在同事之間的認同度方面，Henry 顯然比較不足。雖然大家都覺 得他還好相處，同事們還是認為他比較像獨行俠。對於技術的部份相 當熟練，但是未必能將他的技能和其他的同事分享。他的行事態度還 是和在學校時一樣，只在乎個別的表現。

在另一方面，Lai 給別人的印象就比較主動積極。她肯主動發掘並解 決問題，即使那並不在她的責任範圍內。同事們都覺得她好像進入實 驗室不只六個月了。當然，經理們也注意到了 Lai 具有成為傑出工程 師的特質。已經開始考慮要讓她參與更重要的計畫了。 大部分的人(如 Henry)都對於傑出工作能力的成因有自己的理論，然 而，大多數都錯得很離譜。過去 14 年來，我們對於傑出工程師的成 因，有許多令人吃驚的發現，也打破了許多很普遍的迷思。我們的第 一個發現是：老闆們和同事們眼中的傑出人才往往差異很大。我們首 先請經理人列出他們心目中的傑出人選，然後再建議他們篩選這些人 選，請他們想一想如果他們有很重要的計畫要執行，或是重大計畫有 什麼緊急狀況，需要特種部隊來解決問題，或是自己要出來創業，需 要聘請一些高手時，誰是最佳人選。當我們將這張表拿給表現傑出的 工程師們看時，他們往往對老闆們的選擇嗤之以鼻。『Joe 怎麼可能 會入選？他已經好幾年沒做什麼事了。還有，Maria 怎麼沒在上面？ 每個人有問題卡住了或是需要新點子時都會去找她。』 

這個反應的差異讓我們停下來重新思索。我們往後退了一個步驟，重 新要求經理人以及工程師中的高手分別列出那些人的績效比其他的 同事高出許多。特別是做事方式讓其他人佩服的。我們想要排除那些 不擇手段獲取績效的人，往往他們對組織造成的傷害大到可以抵銷他 們所有的貢獻。 這個步驟的結果是：兩方所提出來的人選當中，只有大約百分之五十 的人是重複的。優秀的工程師和經理人對於誰的表現比較好，大約有 一半的機會是看法不一致的。 

在我們最早在貝爾實驗室的研究中，我們對受試者做進一步的挑選。 只有在經理人及同事們眼中都表現傑出的工程師才會成為我們的研 究對象。(在之後研究 3M 公司時，我們把客戶的看法也考慮進去)。

我們同時也考慮了他們所獲得的獎項，榮譽，及考績獎金的數目等。 另外，專利及發表文章的數量也會列入考慮。這些條件都滿足的傑出 工程師就構成我們研究的對象，由其中分析傑出表現的成因。 

為了要分出表現平平的表現優異的員工的主要差異，我們請教了高階 主管，中階主管，工程師，以及其他研究者的看法。由這些結果中， 我們累積了 45 個主管們及工程師們都覺得會影響傑出表現的主要因 素。大致上可以分為四大類： 

一、認知類的因素：比較高的智商，邏輯推理能力，及創意。 二、個性因素：自信，野心，勇氣，以及是否相信可以控制自 己的命運。 三、社交因素：人際關係，領導能力。 四、工作及組織因素：與主管的關係，工作成就感，對於薪資 及獎金的態度。 

接下來，要找出這 45 個因素中那些是影響傑出表現的重要因 素。我們對數百位表現傑出及表現普通的工程師做了為期兩天 的測試。我們同時也做了資料的蒐集及分析，建立詳細的個案 歷史資料，和員工及僱用他們的主管面談。同時也請他們提供 自傳及個人的檔案資料。 令人困惑的是，經過兩年的研究，我們的資料顯示不論是認知 因素，個性因素，社交因素，或是工作及組織因素都無法作為 分辨出傑出表現的有效因素。對於上面列的所有傳統因素，無 論是單獨或是合併分析，答案都是一樣：無法藉以分辨出普通 工程師和傑出工程師。我們用了十幾種比較資料的方式，將電 腦分析應用到極限，然而，每次的執行結果都讓我們當時覺得： 我們的分析方法一定是有什麼嚴重的錯誤。我們找不到任何一 個可以分辨一個人是否會有傑出表現的因素。

難道是另有一些關鍵因素我們還沒有發現？難道我們原先以為 的主要因素：認知因素，個性因素，社交因素，工作及組織因 素完全與傑出表現無關？ 我們研究結果的長期效應是打破了一般人對於傑出表現的迷 思。而事實上，在我們之後的研究發現：其他的因素也其影響 力。只是大部分的工程師在進入職場時，早已具有足夠的潛力 可以表現得卓越非凡，然而最後卻成就普通。成就傑出表現的 原因並不在他們擁有什麼，而在於他們如何應用他們所擁有的 特質。傑出表現之謎其實在於如何將他們的天分轉換成生產 力：就好像將位能轉換成動能一樣。

我們的結論是：傑出的表 現是努力得來的，與天份無關。(Stars are made, not born.)

九個工作策略 好了，如果你是一個希望能夠提高生產力，增加自己智慧資產 的工程師。你該如何做才能讓別人覺得你表現傑出呢？在我們 這個研究之前，這個答案並不存在。無論是在學校或是在職場 中，沒有任何地方在教培養傑出表現的工作策略。大多數的人 藉由試誤法來驗證自己的想法。然而，許多計術上極有競爭力 的工程師因為在這個過程中犯了太多錯誤，使得他們的整體表 現僅僅比平均稍高一些而已。例如，他們可能沒有採取主動積 極的態度，或者是他們在對整個組織重要性不高的方面主動積 極。 

我們發現，改變你做事的方法以及和別人共事的方法是有必要 的。表現傑出的人事實上做事的方法和其他的人有相當的差 異。他們將他們的工作策略融合到每天的表現中，產生一個前 後一致的行為準則。任何一位具有足夠聰明和動機的工程師都 可以獲得卓越表現的能力。

盡管如此，這種生產力的發揮並不是像大爆炸一樣的釋放出 來。也沒有魔法藥丸或是神奇子彈可以讓你瞬間出類拔萃。而 是藉由九個互相結合在一起的工作策略為基礎發展起來的。以 下依照重要性排列，分別介紹這九種工作策略。 

1. 閃亮的軌跡(Blazing trails) 

你對於之前提到的 Lai 和 Henry 的看法是什麼？ 你是否覺得 Henry 被低估了因為他只強調技術上的競爭力並不公平？或者 Lai 受賞識只因她會閒聊？ 一般的員工，如 Henry，腦海中的主動積極是：想出一些新的 想法可以讓他們的工作做得更好，或是在公司主動幫忙一些額 外的事情，例如規劃年度野餐或是號召同仁去捐血。實際上， Henry 覺得他自己很主動，『我收集了最新的技術文件並學習 了最新的軟體工具，因而我可以將我的指派工作做得極好。沒 有人叫我做這些。』Henry 這樣告訴我。 Lai 很清楚而 Henry 並不了解的一個關鍵是：只有特定的行為才 能讓別人覺得你主動積極。

主動積極的真正意涵是： 

• 主動追求超過自己職權範圍的更大責任(例如 Lai 主動幫忙安裝 新的軟體工具)。同時仍然能夠完成自己的主要任務。 

• 能夠額外付出心力來幫助其他同事或是團隊，就像 Lai 主動幫 助她的同事應付難纏的程式。 

• 當有重要的任務出現在每個人職權中間的灰色地帶時，能夠主 動承擔起責任，並且將任務完美達成。

• 對於認定的目標或是計畫，不屈不撓地堅持直到成功地執行完 畢。就像 Lai 在幫忙安裝軟體時以加班的方式完成原先的構想。 在一般人的印象中，唯一值得主動去做的事是發明一個商業上 成功的新產品，比如說發明物件導向的 Java 語言。如果你花了
許多心力，卻無法在華爾街日報頭版上刊登一篇讚美重大貢獻 的文章，那你主動的努力就白費了。 

然而，在我們的研究中，傑出的工程師都堅信：雖然他們非常 期望夠主動積極地做出巨大的貢獻，日常中的小貢獻，日復一 日地累積起來，也可能造成同樣的影響力。不只這樣，他們發 現通常一個重大的發現是在一連串較小的努力之後，慢慢形成 的。如果你自己的工作態度是不注重在小地方採取主動的態 度，則你所累積的貢獻會逐漸乾涸，而重大的突破永遠都沒有 機會發生。例如，Lai 主動幫助同事處理一個繁瑣的程式，可能 可以讓她的同事獲得一個喘息的空間，而這正是在工作上要產 生有意義的突破所需要的條件。 

傑出的工程師同時也相信，你可以主動做出貢獻的程度會和你 的經驗直接相關。Lai 在還是新進人員時，大家並不期望她承擔 太大的責任，但是她主動對周遭的人做出一些小貢獻為她的同 事帶來一些意外的驚喜。同時也很快地讓其他人認同她是一位 有生產力的工程師。當她越來越有經驗之後，大家才會開始期 望她能夠主動地承擔更高難度，風險更高的任務。 我們對 Lai, Henry 及其他數百位其他工程師的觀察發現，對於 任何一個有競爭力的專業工作者團隊，新進人員必須展現主動 積極的精神。這樣的態度不只會讓主管感到滿意，更重要的是， 你的同事和客戶也會因此而欣賞你的表現。同事們期望中的工 作夥伴不會將自己侷限在職務說明書中所列舉的任務中。他們 希望他們的同事可以像 Lai 一樣願意做超過自己職權範圍以外 的任務。因為他們知道，如果一個新進的人員的工作份量比自 己少，自己就要承擔更多的責任。他們需要能夠延伸自己責任 範圍的工作夥伴，無論是和同事更能搭配，提供客戶更好的服 務，或是更能應付市場的迅速改變。

不只是主管和同事，客戶們也會期望他們所接觸的員工具有這 些特質。如果一個新進人員沒有辦法滿足這些期望，他們可能 會和 Henry 一樣，被歸類為有能力但是生產力不足的員工，無 法對整個團隊做出正面的貢獻。 

2. 知道該問誰(Knowing who knows) 

一般的員工對於建立人際關係網路的想法僅止於有管道可以得 知最新的辦公室八卦，或者是和自己領域中的人及獵人頭公司 的主管保持聯絡，以便於日後可以轉換更好的工作。 傑出的工程師除了上述的管道之外，另外維持了一種更重要的 人際關係網路。因為他們了解，目前社會資訊過載的程度已經 使得很少人具備完成工作所需的所有資訊。他們可能具備 50-80%的知識，但是除非有辦法能夠將剩下的部份補起來，否 則他們的工作就無法順利完成。有效的人際聯繫正是他們補足 資訊不足的方法。 善於利用這個聯繫的人很清楚必須事先和各領域的專家建立可 靠的雙向聯絡管道。這個聯繫網路中的專家們可以藉由彼此的 幫助完成手邊的重要任務。建立這個網路的主要的目的，是希 望盡可能地降低本身的知識不足以勝任新工作的機會。 

有效的人際網路和一般人的人際關係有兩個最大的不同點：

一 是有效的人際網路包含了對的人，

二是獲得回應的速度快。 他們所認識的專家可以第一時間就提供正確的答案。一般人則 比較常得到錯誤的資訊，通常是因為問錯人，或是知道答案的 專家並不在他的人際關係網路中。他們可能因而被誤導，或是 繼續盲目摸索。

反應迅速的的人際網路可以使得優秀的工程師迅速的獲得自己 所缺乏的資訊，而能夠比其他的人更早繼續進行工作。假設他 們花了半天的時間來來問到他們所要得答案，其他的人大概要 花一兩天的時間，而且通常得到的還是錯誤的資訊。長時間下 來，累積的差異相當可觀。 優秀的工程師因為建立了更有效而且更迅速的網路，生產力得 以進一步的提昇而能夠超越普通的工程師。即使是具有相同的 天份，光靠自己總是有所不足。 Andersen Consulting, 一家國際性的顧問公司，指派公司的一位 資訊技術顧問 Claudio 來撰寫一份時限很緊的合約提案。這是 一份五十萬美元的合約，內容是提供生物技術公司所使用生物 化驗程序的資訊技術支援。 Claudio 記得他有一個大學同學現在在生物技術領域中最有名 的公司 Genentech Inc.上班，因此與她聯絡，而她則介紹了一位 專攻生物化驗程序的同事給 Claudio。僅僅用了兩通電話，他就 獲得了完成他的合約提案所需要的資訊。 發生在 Claudio 的另一位同事，Newt 身上的狀況就不同了。和 Claudio 一樣，Newt 也需要相同的資訊。但是 Newt 並沒有運用 自己的人際網路，而採用了公司的建議，將他的問題貼在公司 內部的電子留言板上。第二天，他發現電腦內有 40 個回應等著 他去處理。這些回應的答案有許多是彼此互相牴觸的，但是由 於他並不認識這些提供回應的人，無法判斷其中回答的品質。 他只好一個一個的去了解和確認這 40 個回應的內容。 因此，當 Newt 還在為他獲得過多的資訊而傷腦筋時，Claudio 已經利用他有效率的人際網路將兩人的差距越拉越大。

針對資訊獲得的問題，目前高級主管們普遍的作法是以改進公 司內部電腦網路作為解決方案。主管們花了數百萬美元的經費 在新增電腦硬體及軟體上面，相信像 Newt 這樣的員工可以用 email 解決他們的困境。但是成功的人際聯繫通常建立在一對一 的直接溝通上，比較不人性的電腦網路廣播往往效果不佳。傑 出的工程師會花許多精神在建立，維繫，及運用由一群專家們 彼此互通有無所組成的高效率人際關係網路。和其中有沒有使 用高科技沒有直接的關係。 

3. 主動的自我管理(Proactive self-management) 

一般人相信自我管理的意義在於對於時間及計畫的控制。如果 他們的工作可以在原訂的時程，預算，及規格之內完成，則他 們的自我管理一定沒有問題。

傑出的工程師們知道主動自我管理的真正內涵決不只是時程及 計畫管理。這兩項是每個員工都應該做到，而且是公司付錢請 他們完成的。傑出的工程師的工作策略在於主動地創造機會， 影響工作上的決策，在工作上表現得極端優異，並且開創自己 事業發展的方向。這樣的態度可以使他們加速累積工作經驗和 才能，使得他們在公司中的價值增加。 Elena 在一家提供汽車工業先進陶瓷材料的公司從事研發的工 作。她向公司提出出差申請，希望能夠去參加一個生產力及品 質的研討會。由於這個研討會的內容和她的工作沒有直接相 關，而且出差預算已經快用完，她的上司並不同意。Elena 並沒 有因為這個決定而打消念頭，因為她相信參加這個研討會會使 得她在公司中更有價值。她用了自己的假期去參加這個研討 會，並且自付旅費。

在會中，她發現歐洲正在發展一個新的品質標準 ISO 9000。這 個標準建立了一些投標要求，目的在確保原料，產品，及生產 程序的更高品質，使得歐洲的公司在全球市場中更具競爭力。 如果像她公司這類提供原料的公司無法滿足這些要求，將無法 參與歐洲的標案。 回來之後，她變得更活躍。她利用自己的時間研究 ISO 9000 的 要求，並且利用午餐會議的時間向她的工作團隊解釋。很快的， 她的同事們也開始重視這個議題，並且試著說服他們的上司提 早準備歐洲的 ISO 9000 投標要求對於公司將有很大的幫助。 

高階的主管們比較難接受他們的觀點。他們懷疑歐洲會形成制 定標準的共識，更別說是強制執行新的標準了。然而，Elena 不斷嘗試讓主管們了解，她會寄一些文章或是她寫的備忘錄給 他們，提醒他們第一家符合這個標準的好處。最後，最高主管 們看到了一些實質的好處，因此決定採納這個想法。現在，歐 洲已經是他們公司的最大客戶，同時，品質的提昇也對他們的 美國市場有幫助。 Elena 的自我管理使得公司經營得更成功。即使她的主管並不支 持，她仍主動積極地提昇自己的價值。同時，她也看到了提昇 公司價值的機會。最後，Elena 的作法強調了各個工作策略是互 相結合的。她的自我管理同時包含了主動積極-有意願做超過她 的職務範圍，甚至超過她的上司，而達成一個所有人都受惠的 目標。而能完成這些的關鍵在於：她不輕易放棄。 4. 掌握全局(Getting the big picture) 一般人都有目光短淺的問題。他們只由自己的角度看世界，並 且將自己侷限在相同的觀點。

傑出工程師反而時常跳脫自己的角度而以許多不同的觀點來看 事情。『我的客戶會怎麼想？我的競爭對手的想法是什麼？我 的同事呢？我的上司和公司的股東又在想什麼？』由於他們可 以用不同的視野來衡量事情的重要性，因此他們能對產品做出 改良，或是對問題發展出更完善的解決方案。 

傑出工程師的觀點是由累積足夠的經驗而發展出來的判斷模 式。Sarah 在她獲得電腦科學的碩士學位之後在矽谷找了一個軟 體開發的工作。在求學以及工作的期間，她用一本筆記本來紀 錄她對時常發生的問題及解決方式的觀察。每天晚上，她會仔 細閱讀她的筆記本，像偵探一樣尋找問題的模式及其中的線索。 依 Sarah 的實務和經驗，她和其他的新進人員一樣表現不錯。 然而，她和其他人最大的不同在於她對於軟體以及電腦邏輯內 部的了解。同事們很快就發現了她的洞察力，當有重大的障礙 無法突破時會來尋求她的幫助。而這也提供 Sarah 一個很好的 機會可以接觸到一些她原本工作不會碰到的問題。 在任職滿一年時，Sarah 做了一件同事們覺得非常不可思議的 事。她請求調到軟體測試部門。測試工作時常被誤認為是次一 等而且前途發展有限的。軟體測試人員的工作主要是檢查其他 人的成果，確認軟體的執行和預期中的相同。和其他的研發工 作相比，測試工作少了一些開發新產品所帶來的個人成就感。 由於他們總是帶來壞消息，例如軟體的臭蟲或是品質的問題， 軟體開發工程師即使知道是必要的，通常也是很不情願，甚至 略帶敵意地容忍測試人員的存在。 但是 Sarah 將測試工作視為一個新的機會，可以從完全不同的 角度來了解她自己的工作。她將會廣泛地了解造成軟體錯誤的
原因。可以在一兩年之內累積大量的經驗。同時，可以和最重 要的客戶合作，一起開發客戶眼中合理的測試程式。 在這個過程中，Sarah 可以學到在將來的軟體開發時，如何避免 本質上及觀點上所會犯的錯誤。同時，測試工作也使得她有機 會了解她同事們的觀點。她由同事們開發軟體的問題及排除的 過程中學習到相當紮實的技巧。 兩年後，當 Sarah 重新回到軟體開發的工作時，她在測試部門 的訓練開始展現在工作上。她的同事們很快就認定她是軟體大 師。Sarah 成為他們公司的軟體專家，帶領著公司在矽谷中力爭 上游。 像 Sarah 這樣的傑出工程師，可以分辨不同觀點中的細微差異。 這並不是因為有天份。而是因為他們主動追尋，並且將這個特 質轉換成實質的幫助。

5. 正確地追隨(The right kind of followership) 

一般的工程師相信，擔任追隨者角色的重點在於嚴守分際，毫 不遲疑地接受命令，同時不對主管造成威脅。 然而，傑出的工程師很早就了解到，副手還可以有更正面的貢 獻，一個傑出的第二號人物的真義在於專心做出幫助。他們主 動而且積極地投入對組織（及主管）的成功有幫助的事，同時， 對於該做什麼及如何做，他們可以做出獨立而決定性的判斷。 一個好的追隨者可以和主管充分配合來達成整個組織的目標， 即時他和主管之間的個性及工作文化並不相同。 這點可能會另許多人感到驚訝，因為一般人認為傑出的人應該 都是主管或是焦點人物。通常，傑出的副手對主管所做的幫助

在於對於可能有困難的地方事先提出警告，做一個心思縝密的 共振板，或是質疑主管決定的正確性。 

在許多的科技公司中，公司相信客戶真正的需求和知識員工所 認為最好的必須做出區別。我常常聽到老闆們和我抱怨當客戶 需要的只是一部道奇車，而他的員工們卻造了一部勞斯萊斯。 技術員工往往對於製造出最好的相當執著，他們希望能把最先 進的技術都用在產品中，即時這樣會造成時程延誤及增加預算。 但是有時對錯不一定是絕對的，一位貝爾實驗室的優秀工程師 在主管質疑他做了額外的功能時據理力爭。他的主管希望能夠 在電話交換機中採用簡化的轉接功能來提前完成產品提供給客 戶。 她說：『先別管這些額外的功能，這個客戶寧可現在就有一個 基本的機器可以用，而不希望因為一個更強的功能多等一個 月。』 她的工程師回答：『未必是這樣』。並且和她坐下來討論這個 產品對這個客戶及其他客戶的的短期和長期目標。

『沒錯，短期內對這個客戶來說，這樣做可能有好處。』她的 屬下說。『但是這樣做也有風險，他們可能會把我們歸類成較 低階的產品線。同時，如果我們現在將這個額外的功能加進去， 我們已經在進行中的下個客戶的產品開發會省很多時間。不 過，我們還是再和客戶確認一次他們的想法。』 這位優秀的追隨者了解他的主管最關心的問題。同時，他也試 著將她的觀點轉移到他們共同的整體目標。在可能的狀況下， 傑出的追隨者可以稍微修正他們的方向使得他們的努力和公司 的目標吻合。不行的話，他們只好另外找一個更適合的公司。

6. 團隊合作(Teamwork as joint ownership of a project) 

一般的員工所了解的團隊合作是在計畫進行中或是解決問題時 和他人合作，並且做好自己的部份。 

傑出的工程師對團隊合作有更高一層的看法。他們將之視為一 連串複雜的技巧，包含了參與設定共有的計畫目標，團隊承諾， 工作紀律，時程，及分享團隊成就。同時，這也包含了主動促 進團隊的互動--讓每個人都覺得是團體的一分子，處理衝突， 並幫助其他成員解決問題。 有一個醫療器材供應商由於醫院對於他們最新型的加護監視器 失效十分不滿，因此成立了一個危機處理小組來處理這件事。 這個儀器會不定時的發出錯誤緊急的警告，使得病患和醫療人 員都很困擾，醫療人員時常匆忙趕來處理緊急的狀況，才發現 完全沒有問題。 這個處理小組包含了五個部門的專業人員，包含了生產，研發， 及客戶服務的人員。在這個小組的 7 位成員中，只有 Aiden 最 為優秀，他原本是一個工程師，為了多了解客戶服務相關的事 務而調到客服部門。 在小組第一次會議進行到了第 3 個小時的時候，成員們對於該 立即採取的行動起了激烈的爭執。Ewing，一位 53 歲，在公司 已經服務 25 年的生產工程師，希望說服其他人繼續派遣修護人 員到醫院維修。而 Julie，一位研究部門的新進人員，則希望能 夠比照嬌生公司處理 Tylenol 事件的先例，全面回收產品。 隨著討論的進行，Ewing 和 Julie 的爭論越來越白熱化，同時也 越不文明。Aiden 發現他自己以及其他人開始感到沮喪及煩躁。 為了不讓這種狀況持續發展至不可收拾，Aiden 將他的感覺提

出來，並且建議休會 10 分鐘，讓大家休息一下來想想有沒有轉 圜的方式。 當會議繼續進行的時候，Aiden 請 Julie 來代言 Ewing 的意見， 同時請 Ewing 替 Julie 的看法辯護，試著利用這種方法來打破僵 局。雖然 Julie 和 Ewing 有點不太情願，這個策略有效地削減了 逐漸升高的緊張及憤怒。這時，其他的小組成員開始腦力激盪， 提出可能的想法。一位很有經驗但是害羞的設計師 Eloise，坐 在角落的位置而且整天都還沒有發言。她用很溫和的聲音提出 她的看法：『由於並不是每一家醫院都有相同的抱怨，我們是 不是該先找出為什麼這幾台機器會持續發生問題？或許這些機 器本身一開始就有故障，也可能是這些機器安裝的醫院有一些 特殊的地方。與其全面回收所有的產品，不如只將有問題的機 器收回來，同時檢查所有的設定資訊來查出到底問題出在那 裡，說不定是磁場太高之類的現象造成的。』 

她講完時，並沒有其他的成員回應她的想法。討論繼續進行了 幾分鐘之後，Aiden 加入討論並提醒大家：『我不確定是不是 每個人都聽到剛剛 Eloise 的建議，我想她的方法應該可以幫我 們解決這個事件，現在是不是可以請妳再說一次給大家聽？』 Eloise 再一次地提出她的想法，Aiden 注意到這個建議不但展現 了對客戶的問題認真回應，同時也比全面回收成本低。其他的 小組成員開始支持 Eloise 的方法來化解僵局，然後開始討論後 續的議題。 如果不是 Aiden 出面干涉，Ewing 和 Julie 可能還在爭吵，Eloise 的意見可能永遠不會被注意到，整個小組不知道還要掙扎多 久。雖然 Aiden 在小組中的角色是客戶服務部門的代表，他做 了超越他職責的努力而增進了團隊的效能。

7. 小領導者的領導風格(Small-l leadership) 

一般人很著迷於大領導者的領導風格(Big-L Leadership):大願 景，大魅力，大成功。對他們而言，領導能力是與生俱來的天 份。擁有這種天份的人能透過掌權來炫耀自我，對最重要的事 情有決定權，同時對於向下授權之類的事並不感興趣。 傑出的員工則將領導能力視為一種工作策略，運用於自己的專 業能力及影響力來說服一群人團結起來，一起完成重要的工 作。這項工作包含了許多方面的努力：幫助團隊創造一個清楚 的願景，建立信任並獲得承諾來努力完成任務。爭取足夠的資 源以順利達成目標。同時指導整個計畫的進行直到順利執行完 畢。 我們都知道有些人非常聰明，卻沒辦法領導最小的計畫。除了 智力之外，還要具備其他的能力才能展現小領導者的領導風格 (Small-l leadership)。小領導者了解人與人之間微妙的關係，而 大領導者則專注在自己的想法，自己的工作風格，與自己的目 標。小領導者知道他們必須考慮所有團隊成員的需求，技能， 渴望，及權力。 這種將注意力放在自己以外的領導風格在職場現實上是比較有 生產力的。小領導者通常對於他所領導的團體沒有正式的職 權。同事們只有在確定團隊中的領導者對於自己和其他人的利 益一樣重視時才願意參與。因此，要將團隊組合起來需要和所 有的成員互動，溝通，這對於大領導者而言，是浪費寶貴的領 導時間。然而，一個願意和所有團隊成員同甘共苦的小領導者， 往往比最有魅力的大領導者主管更能獲得成員的忠誠及信任。 傑出領導者的最大秘訣，也是和大領導者及表現普通的領導者 最大的差異，在於他們不會假設他們對於其他人的一切事情都

能完全掌握。大多數的大領導者相信自己是無所不能的，他們 知道什麼是對成員及狀況最好的處置。 

傑出的小領導者總是會先詢問成員的意見，即使他們覺得他們 已經知道結果。Anithia, 一位德商公司在美國的軟體設計師， 在開始計畫之前一定會先驗證她對同事們想法的假設是否正 確。當她被指派去帶領一個開發網路軟體的計畫時，她在第一 次的會議就先詢問成員們對於工作角色和任務的意見。 『John, 在上次和你一起執行計畫時，你曾提到你希望能有更 多的硬體經驗，目前還是這樣嗎？因為這個計畫硬體的部份非 常重要。』 Anithia 像一個認知心理學家一樣暫停自己的假設，提出一些開 放性的問題，讓成員們可以表達他們目前具備的技能以及他們 對於計畫的期望及需求。因此，她可以將任務的分配和成員的 能力及興趣做更好的配合。她希望能夠避免將她的同事定型， 不要像好萊塢製作人一樣製造演員的刻板印象。 

當然，身為員工不可能總是獲得所有想要任務與福利。但是， 沒有正式職權的小領導者可以藉由真誠的聆聽及試著滿足部份 的需求來贏得認同。同時這個努力溝通的過程也可以為計畫打 下互信的基礎，幫助度過計畫遇到困難時無可避免的壓力。在 某一個技術領域展現優越的實力可能可以幫助一個傑出的工程 師被指派為團隊的領導者。但是小領導者知道階層的力量並不 能延伸到人際關係這一方面。他們會試著創造出一種氣氛，讓 成員們感受到『我們是在同一艘船上』。 Anithia 所領導的計畫後來客戶的反應非常好。在年終慶功的晚 宴上，北美部門的總裁對 Anithia 大加讚賞，邀請她一起到台上 來表揚這個計畫及她以前所領導計畫的成功。他說：『如果我
們公司有 500 個像 Anithia 這樣的人，控制整個北美市場是遲早 的事。』然後，他請 Anithia 講幾句話。 就像許多演員獲得奧斯卡獎時一樣，Anithia 可以很快的講一些 感謝上司及成員的話。而她卻不是這樣做。她邀請了所有的團 隊成員一起到台上來，請其中的一位將所有的人介紹給大家， 然後她說：『這個計畫是我們共同努力的成果，沒有每一個人 的貢獻，不可能有今天的成功，我們對於這個計畫感到很驕傲， 非常高興你們也這樣想。』然後他們一起對大家鞠了一個躬。 8. 精明(Street smarts) 一般人多半太專注在討人喜歡，以為這樣是在職場中快速升遷 的方法。他們要不就是對於辦公室內的政治問題太過關心，要 不就是故意裝作完全不在乎。 傑出的員工了解任何的組織中都有許多正當而互相競爭的利 益。藉由他們對組織運作的理解力，可以幫助他們在這些互相 牴觸的競爭中，促成合作，凸顯衝突的部份，並且讓任務順利 完成。這個動作包含了具備處理個人及團隊動態的傑出運作能 力，知道何時該避免衝突，何時該正面對決，同時知道如何將 可能的敵人轉化為盟友。 記得 Sarah 嗎？在第 4 項工作策略中提到的傑出軟體開發工程 師。雖然她的同事都覺得她瘋了，她仍然自願請調到測試部門。 這個動作不但讓她對她的工作有不同的觀點，她同時也知道那 些人會和她日後的工作相關，並開始建立良好合作的關係。這 種組織上的聯繫不但可以提高她的地位，還可以讓日後工作上 的互動更加順利。

在第 3 項工作策略中提到的 Elena，運用了大量的組織運作機智 來影響她的公司，將營運的焦點轉移到 ISO 9000 及歐洲市場的 機會。首先，她利用午餐會議的機會將她在研討會中學到的傳 授給她的同事。在她對這個議題更加了解之後，她舉辦了更詳 細的訓練課程。同時，她向她的上司仔細解釋這個特殊標準對 公司的好處，並且藉由寄送關於業務及營收潛力的相關文件及 備忘錄慢慢遊說管理階層。當然，在和更上層的管理者接觸之 前她一定會先得到她上司的准許。接著她開始訓練她的其他同 事如何贏得歐洲客戶的標案。由此可看出，在她試著推銷她的 想法的同時，她將這個想法和公司的重要目標結合在一起。同 時也很注重組織運作的禮儀。 9. 呈現(Show and tell) 一般員工認為呈現就是利用炫目的簡報，長篇的備忘錄，或是 公開展示自己的成果來吸引管理階層的注意。他們的重心擺在 自己的形象以及自己所要傳達的訊息，而不是擺在聽眾。 傑出的工程師則會仔細篩選所要表達的資訊，以最有效，最友 善的格式來傳遞訊息並說服特定的聽眾。就最高層次而言，呈 現的意義在於對於特定的聽眾選擇適當的訊息，或是對特定的 訊息選擇適當的聽眾。 呈現的重要性是無法迴避的。一位專業人員如果無法有效地以 簡報的方式傳達自己的想法給其他的人，在現今的職場中要生 存是相當艱苦的。對於大多數的知識工作者而言，這裡討論的 重點並不是大型的演說，像比爾蓋茲在超大型的會議中心以最 先進的多媒體設備及電腦特效所做的展示。而是針對在公司內 部的小型會議室中，對 5 至 20 位聽眾所做的簡報。簡報的聽眾

多半是同事，上司，或是客戶。而內容多半是技術性的或是與 產品相關的議題。 對傑出的專業人員而言，簡報準備的過程比較複雜。我們的研 究觀察到呈現的表達方式會逐漸修正，由單純的傳達資訊轉變 為對訊息的塑造。傑出的工程師通常精通將訊息傳達給特定的 對象，說服聽眾接受所要表達內容，及事先對可能產生的批評 做出準備的能力。 一般人最常見的錯誤會發生在由單純的資訊傳達，提升到試圖 運用這個訊息發揮影響力時。在這個過程中，他們聽眾的組成 已經大不相同了。然而，他們呈現的風格及的結構卻維持和原 來一樣。 一位財星 500 大企業的勞工關係經理在和公司的工會協商新的 合約時，面臨了必須降低醫療照顧成本的問題，他以極佳的呈 現方式來解決這個問題。在這個協商的過程中，他所擬定的計 畫必須同時被公司的最高主管及工會接受。 他的主要處理方式是將相同的資訊塑造成完全不同的表現方 式。首先他針對一群較低階的工會職員進行為期一週溝通，每 天簡報一小部份的資訊。他發給他們清晰而容易閱讀的講義， 讓他們可以複製給所有的工會成員。講義的內容淺顯得讓人可 以快速理解。這個呈現的主軸在於傳達一個訊息，如果工會同 意改變醫療照顧的計畫。公司承諾將所省下來的資金用來更新 老舊的工廠設備，使得工廠更具競爭力。同時降低關場及失業 的風險。 而他稍早對公司的執行長及副總裁所做的簡報基本上含有相同 的資訊，但是卻用完全不同的方式來包裝。首先，和對工會簡 報相比最大的不同是互動的時間少了很多。因此，大部分的資

訊包含在一份詳細的報告中。他以其中有一個很具有說服力的 章節來建議接受新的計畫。此外，他有一個小時的時間可以對 公司的執行長及董事長進行簡報來加強他的論點。 他在簡報中強調，如果管理階層執意改變醫療照顧計畫而沒有 任何有創意的補償計畫，工會將不會同意而使協商幾乎不可能 進行。他提醒公司目前才剛進入一個快速成長期，股東們可能 無法忍受員工罷工。 雖然雙方陣營都對他的計畫有一些批評，然而，這位優秀的協 商者已經將這個計畫的基礎打得很穩固了。到了最後，管理階 層及工會都接受了他的建議案，只做了小部份的更動。 在這個案例中有許多值得學習的呈現技巧。但是其中最重要 的，也是一般人和高手最大的不同點在於：了解你的聽眾，並 且藉此塑造所要傳達的訊息。 Meara 的工作是設計影像傳輸軟體，可以透過電話線路在醫院 的急診室之間傳遞 X 光片，心電圖指數，及即時的電視畫面。 

她用了一個電視短片作為簡報的開頭，來對急診室醫師及醫院 主管介紹她的團隊所設計的最新軟體。短片以汽車的緊急煞車 聲和救護車的警報聲開始，一個小孩被緊急送入急診室，一位 醫師開啟她們公司的儀器並且說他只有幾分鐘的時間可以來挽 救一條年輕的生命。 她說：『我們目前的進展可能可以挽救這個孩子，或是你的孩 子的生命。在我們計畫進行中，我們不斷的觀看這個短片來提 醒自己，盡量將產品做到最好有多重要。現在，請和我們分享 我們的成果。』

為了展現新的軟體和之前版本的差異，Meara 使用了電子計時 器搭配心跳聲做示範。首先，她使用舊版的軟體，在所有的聽 眾還在等待螢幕上慢慢傳來的畫面時，計時器已經跑完了，心 跳聲停止了，手術室的警告燈也熄滅了。而當使用新的軟體展 示時，畫面傳輸的速度變快，在計時器停止之前已經完成影像 的傳輸。 然後 Meara 向她的聽眾解釋在產品開發的過程中為了縮短傳輸 時間所做的努力。包含了那些嘗試是有幫助的，那些則沒有用， 以及其中的原因。她將技術上的論點和醫療專業人員挽救性命 的過程戲劇化地編織在一起。 Meara 藉著讓她的聽眾們感受到自己的孩子被送進急診室的恐 懼，吸引聽眾們的注意力到公司的產品。然後戲劇性地展示了 新產品的價值。 成為閃亮的明星 我們對於我們的生產力提昇計畫做了長期的成效評估。觀察工 程師們在學習了這些工作策略之前和之後生產力的差異。在過 去的 7 年之中，有超過 1000 位美國及歐洲的專業工作者受過這 個訓練。這個訓練課程曾經授權給專業的訓練機構，同時也有 大學將這套計畫用於課堂上以及職員的成長計畫。 為了提供評估的基準，我們訪問了主管，傑出的工程師，及一 般的員工，請他們列出明顯顯示出生產力提昇的衡量標準。在 經過許多次的反覆實驗之後，我們確認了滿足這些衡量標準的 員工，在生產力上確實有明顯的提昇。

然後我們訪問了 300 位參加者及 300 位沒有參加人員的直接主 管，根據這些衡量標準來評分，第一次評分是在參與計畫之前， 第二次則是在完成計畫之後 8 個月。 

在這個主管評分的分析中，參與計畫的人員在生產力上都有顯 著的提昇。參加過這個訓練的工程師不但解決問題的速度變 快，工作產出的品質也提昇了，同時不斷地讓他們的客戶感到 驚喜。 這個傑出工作策略的計畫並不是用來矯正生產力低落的員工。 參與計畫的人員中，有 30%是本來表現就已經很優秀了。然而， 他們生產力的提昇仍然是相當顯著。 生產力提昇最顯著的是女性及少數民族的工程師。根據他們上 司的說法，參與計畫前後的生產力差異平均值可以達到 400%。 這個訓練計畫的成功驗證了我們研究的主要發現。要大幅提昇 生產力並不需要魔法。當一個工程師表現平平時，通常不是因 為他的能力不足。而是因為他從來沒有學過可以提高他生產力 的工作策略。一旦他了解了這些策略，他就開始邁向傑出之路。

---- 

據此結論，作者又提出了九條具體的工作策略方法：

1) Blazing trails，積極開拓，承擔自己職責之外的

2) Knowing who knows，英雄惜英雄，社交圈不應該僅僅是流言蜚語，獵頭跳板。 They have the right people in them, and they are faster

3) Proactive self-management，積極主動的自我管理者

4) Getting the big picture，旨趣宏大

5) The right kind of followership，成為實際上的領導者 Often star followers support the leader by alerting him or her to trouble spots, by serving as a thoughtful sounding board, or by challenging the leader's decisions.

6) Teamwork as joint ownership of a project 團隊合作意味著各得其所，各安其位

7) Small leadership 領導力不是黑體的，有意傾聽，以理服人

8) Street smarts 具臨淵涉險解決問題的能力

9) Show and tell 不僅展示, 要詳細說明</t>
<t tx="leo.20170826223748.1">How to be a star engineer (中文翻譯)

Robert E. Kelley, Carnegie Mellon University

(Robert E. Kelley, “How to be a star engineer,” IEEE Spectrum, pp.51-58, Oct. 1999.)

IN 1985, I WAS ASKED A SERIES OF QUESTIONS, AND HAVE been tracking down their answers ever since.

Bell Laboratories (then part of AT&amp;T Corp. and now mostly belonging to Lucent Technologies Inc.) was perplexed.

It hired the best and the brightest from the world’s most prestigious universities, but only a few lived up to their apparent potential for brilliance.

Most developed into solid performers of mostly average productivity who did not substantially further Bell Labs’ contribution to AT&amp;T’s competitive advantage in the marketplace.

What the labs wanted to know was: what separates the star from the average performer? Is it innate or can star performance be learned?

Could a program to improve productivity be designed that would help turn average performers into stars?

Not just companies are asking these questions. Since 1985, I have met few professionals who do not want to be more productive.

In their own minds, most engineers believe they can be stars. They dislike being outshone by a co-worker and strive constantly to do better than before.

In the workplace, they are being forced to do more with less. Global competition, mergers, and downsizings have left them with greater responsibilities and fewer resources.

Who among us is not working longer and harder today than five years ago? Who does not have more
work piled up in the in-basket or long lists of unanswered e-mail and phone messages? Which of us is not afraid that if we are not more productive, we might get the ax next? Who does not want more control over their lives–a better balance between work and personal lives?

Everyone is being told to work smarter, but no one seems to know what that means.

My colleagues and I have been working on these corporate and personal productivity questions ever since. Over a thousand engineers from Bell Laboratories, 3M, and Hewlett-Packard contributed to the original research as both collaborators and subjects.

To discover the secrets of star performance, we used paper-and-pencil tests, direct observation, work diaries, focus groups, and individual interviews, drawing upon statistical analyses, content analyses, and iterative model building as appropriate.

Many other companies took part, from those reliant on electrical engineers–such as Analog Devices, Fore Systems, and Air Touch–to those like Shell Oil and Kimberly Clark that are involved in other kinds of engineering.

They have used our productivity improvement program to turn their engineers into higher performers and in so doing have also contributed to the growing body of knowledge on star performance.

The path to stardom Lai and Henry were hired at Bell Laboratories with similar credentials: 3.8 GPAs (grade point averages) from top-ranked undergraduate programs in electrical engineering; summer internships at computer companies; and glowing recommendations from professors. Yet they took distinctly different approaches to their first six-month assignment.

Mornings, they took classes in telephone technology and the methods Bell Labs uses to conduct its work. Afternoons were spent on break-in projects–work that needed to be done but that would not jeopardize crucial projects if done badly.

Henry holed up in his office as if writing his dissertation or studying for a law bar exam. He collected volumes of technical documents to acquaint himself with the latest ideas, surfacing only for a bathroom break or a mandatory staff meeting.

“What’s going to count,” he remembered thinking at the time, “is whether I can prove to my co-workers how technically smart I am.”

Lai set aside 3 hours each afternoon to work on her assignment and to sharpen her technical skills. In whatever time was left of her workday, she introduced herself to co-workers and asked questions about their projects.

If one of them needed a hand or was facing schedule pressures, she volunteered to help. Lai was new to the work place culture, but even so her colleagues warmed to her willingness to pitch in, especially given that their problems were not hers.

One afternoon, a colleague was struggling with a recalcitrant program for a software project
due the next week. Lai had picked up a new programming tool in an advanced course, and she
thought it could handle the problem.

So she offered to work on the program while her colleague focused on the larger project. On another occasion, some sophisticated software tools had to be installed on everyone’s office PC.

Standard practice was for each PC user to do the job by trial and error. Having run into the same cumbersome procedure during an internship, Lai thought it more sensible for one person to install the tools in all the machines, and she offered to do the job. But the installations proved unexpectedly tough, requiring two weeks rather than the four days she had planned. Lai could have backed off but she saw it through, even though she had to come in early and stay late for several days so that neither her work assignment nor her class work would suffer.

After six months, Henry and Lai had finished their technical classes and their first
assignments.

Their projects were successful and judged technically competent. Indeed, Henry’s work may have been slightly more technically proficient than Lai’s.

But in the work place, Henry came up short. While known as a nice guy, he was also pegged
as a loner. He was seen as technically adept, but his ability to share his skills with co-workers was questioned. He carried on as if still in school, where the individual’s performance is what counts.

But Lai came across as someone who took initiative, who saw several problems and stepped forward to solve them even though they were not her responsibility.

She had created the impression of being in the lab group for far longer than six months. Managers of course noticed she was showing the characteristics of a star engineer and already were viewing her as a candidate for fast-track assignments.

As seen in the quiz on “Understanding star performers”, most people (like Henry) have preconceptions about what causes star productivity, and most of their notions are as wrong as can be.

Over the past 14 years, we have debunked many common myths and made some startling discoveries about the outstanding engineer. One of our first findings was that workers and their bosses tend to disagree on who the star performers are.

We first asked managers to list their choices. We then suggested narrowing the list to those persons they would turn to if they had to staff an important new project, if they had a crisis that needed a SWAT (Special Weapons and Tactics) team, or if they were going to hire for their own business.

When we showed the list to a group of star performers, they pooh-poohed the managers’ selections. “How did Joe get on the list?” they asked incredulously. “Joe hasn’t done much for years.

And where’s Maria? Everyone turns to her when they hit a brick wall or need new ideas.”

The difference in their reactions gave us pause. We took a step back and asked managers and brain-powered workers to name those people who greatly outproduced and outperformed their peers, especially if they did so with methods others admired.

We were after the cream of the crop–we wanted to weed out the high producers who bulldoze their way to greater productivity but whose wake of destruction swamps any positive contribution.

The result of this exercise was only a 50 percent overlap between the two groups. Brainpowered workers and their managers disagree half the time on who the stars are.

For our original research at Bell Labs, we refined our sample. We included only people on both managers’ and co-workers’ star lists.

(In later work with 3M, we added the requirement that the stars receive customers’ approval, as well.) We also took into account the number of awards, honors, and performance bonuses won, as well as patent or publication credits where applicable.

These undisputed stars were the group we studied and whose performance was the basis for our research.

To pin down how star performers and solid middle performers differ, our research team asked top executives, middle managers, engineers, and other researchers for their opinions.

We accumulated 45 factors that managers and star performers close to the action believed led to
outstanding performance. The four main categories were: cognitive factors, such as higher IQ, logic, reasoning and creativity; personality factors, such as self confidence, ambition, courage, and a feeling of personal control over one’s destiny; social factors, such as interpersonal skills and leadership; and work and organizational factors, such as the worker’s relationship with the boss, job satisfaction, and attitudes toward pay and other rewards.

Next, to figure out which of the 45 factors differentiated between the groups, we put hundreds of star and average performers in meeting rooms across the country and administered a two-day battery of tests. We also did surveys, developed detailed case histories, and interviewed
employees and the managers who hired them. Engineers and managers also supplied us with biographical information and personnel file material.

Perplexingly, after two years, our data showed no appreciable cognitive, personal or psychological, social, or work or organizational differences between stars and non-stars.

For each traditional measure, alone or in combination, we had come up empty. We compared the
numbers a dozen ways, stretched computer analyses to their limits, and with each run, found the computer spitting back what we then thought was the result of some terrible methodological mistake: there were no quantifiable differences. between members of the two groups.

Yet, by recognizing this, had we not discovered something critically important? That the four factors we presumed were vital to star performance–cognitive, psychological, social, and organizational characteristics–were not the real drivers at all?

The long-term value of our effort was that it laid to rest the cloud of myths around star performance [see quiz ].

And in fact, over the next years of our research, we learned that other factors were at play.

Most engineers come to the workplace with more than enough potential to succeed splendidly, but most end up as run-of-the-mill.

The stars were not standouts because of what they had in their heads but because of
how they used what they had.

The productivity mystery lay in learning how to transform their talents into high productivity–much like turning potential energy into kinetic energy.

Stars, we saw, are made, not born.

Nine work strategies

So, if you are an engineer searching for a productivity boost to your intellectual capital, what must you do to dazzle everyone? Prior to our work, an answer did not exist. The star work strategies were taught nowhere, not in school or on the job. For the most part, it was a matter of trial and error. But many technically competent engineers make too many productivity errors to end up as more than average. For example, they fail to take initiatives or take initiatives of no importance to the organization.

We found that you need to change how you do your work and how you work with others. Star performers in fact do their work quite differently from the pack.

They weave their starring strategies into a consistent pattern of day-to-day behavior. But any engineer with the necessary smarts and motivation can acquire their power.

All the same, no Big Bang revelation unleashes this kind of productivity. No magic pill or silver bullet will blast you to the top.

Instead, stellar performance is based on a set of nine interlocking work strategies. They are ranked in order of importance and synthesized into an expert model.

1. Blazing trails

What did you think of Henry and Lai? Did you see Henry’s emphasis on just technical competence as undervalued or Lai as being rewarded for, well, schmoozing?

Average performers, like Henry, imagine initiative is coming up with ideas for doing their job better or volunteering for little extras in the workplace, like planning the annual picnic or recruiting people for the blood drive.

Indeed, Henry believed he was taking initiative. “I gathered up the latest technical information and learned about the latest software tools so that I could do a bang-up job on my assignment.

Nobody told me to do any of that,” he told us.

What Lai understood, and Henry did not, is that only certain actions earn the initiative label.

Star-quality initiative means:

Seeking out responsibility above and beyond job description (as when Lai installed the PC software), while still completing your core assignment.

Undertaking extra efforts for the benefit of co-workers or the larger group, as when Lai offered to help fix the software program on her co-workers’ project.

Stepping willingly into the gaps between job descriptions where important work often pops up, grabbing your share of it, and doing a bang-up job on it.

Sticking tenaciously to an idea or project and following it through to successful implementation, as Lai did when she worked the extra days necessary to install the new office software.

Many average performers suppose the only worthwhile initiatives are on the order of inventing a commercially successful new product, like the object-oriented Java language.

If something will not make the front-page of The Wall Street Journal under a headline proclaiming a steep climb in bottom-line profits, then it isn’t worth the effort.

Star performers in our studies were adamant that while they are always looking for roof-raising initiatives, the small, day-to-day efforts had the same impact over time.

Moreover, they noted that the whopper initiatives tend to follow a long string of lesser efforts. If the work climate you create does not value small initiatives, they will dry up and the big ones will never get a chance to happen.

Lai’s helping-hand initiative, for instance, may have given a co-worker the breathing space needed to make a meaningful breakthrough.

The stars also believe that expectations about the initiative you may take hinge on your level of experience. As a new employee, Lai was not expected to take big initiatives, but her record of taking smaller ones pleasantly surprised her co-workers and soon established her reputation
as a productive engineer.

As she gains more experience, Lai will be expected to take on higher-level initiatives of greater difficulty and riskiness.

Our observations of Henry, Lai, and hundreds of other engineers show that any newcomer in a unit of professionally skilled, competitive workers must demonstrate initiative.

Such behavior impresses managers, but more importantly, it impresses your co-workers and customers.

Co-workers look for people who do not lock themselves within a rigid job description. They want colleagues, like Lai, who are willing to step into the gaps between jobs because they know that if the new worker does less than her or his share, the rest of them will have to carry more
of the load. They need people who extend themselves–whether it be to their colleagues, to the customers, or to the changing needs of the marketplace.

Customers are also looking for these characteristics in the employees they encounter. A new hire who falls short of these expectations will be relegated to the pack, labeled, perhaps like Henry, as competent but not productive in ways that benefit the group.

2. Knowing who knows

Average performers think networking just means building a grapevine for learning the latest office gossip, or socializing with people in their field and with executive head hunters who can help them in future job hunting.

Star producers engage in addition in a more important type of networking. As they realize, the information overload of today’s society means that few people know all they need to know to get their jobs done. They know maybe 50-80 percent, and until they can make up the deficit,
they are stuck.

What helps the stars get unstuck is effective networking.

A star knows it is vital to develop ahead of time dependable two-way streets to the experts, who will help each other complete the tasks critical to the bottom line.

The goal is to minimize the knowledge deficit that every engineer discovers as she or he measures up to a new job.

Stars’ networks differ from typical workers’ networks in two important respects. They have the right people in them, and they are faster.

The people in their networks can provide the right answer the first time. Average performers get wrong answers more frequently either because they ask the wrong people or because the experts with the right answers are not in their networks.

So they spin their wheels or go down blind alleys.

The faster networks get the stars unstuck and back on the task sooner than the rest. If it takes a star a half-day to get an answer, it takes the others one to two days to get it and often it is wrong. Over time, these extra days add up.

Better-connected and faster networks allow the stars to turbo-charge their productivity, so that they outpace the average performers, who might have similar talent, but go it alone.

Claudio, an information technology consultant working for the international consulting firm, Andersen Consulting, was assigned to write a contract proposal to a tight deadline.

At stake was a $500 000 contract for providing information technology support for bio-assaying
processes used in biotechnology firms.

Claudio remembered an undergraduate classmate who had gone to work for Genentech Inc., the industry leader, and called her. In turn, she put him in touch with the scientist who had pioneered the assaying process. In just two afternoon phone calls, he got the information critical for his report.

Contrast what befell Newt, an Andersen colleague of Claudio’s who needed the same information. Instead of thinking through his network, Newt followed the company’s recommended procedure and posted his question on the in-house electronic bulletin board. When he logged into his computer the next workday, 40 leads were waiting, all of which had to be plowed through.

Many of the messages contradicted one another, but as he knew none of the people who responded, he could not to judge the quality of their answers. He was essentially still at
square one with 40 potential leads to track down.

Thus, while Newt was still struggling with his information overload, Claudio had already used his star network to move faster and farther ahead.

The current rage in many upper management circles is to embrace computer intranet-ing as the high-tech solution to knowledge deficits.

Managers spend millions of dollars on additional computer hardware and software, believing workers like Newt can e-mail their way out of such quandaries.

But successful networking is most often accomplished in one-to-one interactions, not in the impersonal, one-to-many format of computer technology.

Star networking entails building, maintaining, and operating within a group of experts who share knowledge for mutual benefit. It has little to do with technology.

3. Proactive self-management

Average performers believe self-management means managing time and projects better. If their work is done within schedule, budget, and specifications, then they must be good self-managers.
Star producers know that much more than time or project management is at stake. These requirements you are expected and paid to meet.

Their work strategy helps them proactively create opportunities, direct work choices, perform extra well on the job, and carve out a career path. It enables them to develop a portfolio of talents and work experiences that increases their value to the company.

Elena worked in the R&amp;D department of an advanced materials ceramics company supplying the auto industry. She requested travel funds to attend a productivity and quality conference. As it was not directly related to her work, her boss could not see the point; besides travel funds
in the budget were low.

Elena was undeterred. Since she believed the conference would make her more valuable to the company, she took vacation time and paid her own way.

While she was there, she learned about Europe’s upcoming quality standard, ISO 9000. The goal of these bidding requirements was to ensure higher-quality raw materials, products, and processes–all to give European companies a greater competitive edge in world markets.

If a supplier company, like hers, could not meet them, it would not be allowed to bid on European projects.

Elena came back all jazzed up. On her own time, she got up to speed on ISO 9000 requirements and explained them to her work group during a brown bag lunch. Pretty soon her co-workers were excited, too, enough to go to their management and persuade them of the benefits of
getting ahead of the learning curve on Europe’s ISO 9000 bidding specs.

Upper managers were a harder sell. They were skeptical that the Europeans would ever agree on these new standards, let alone enforce them.

But Elena kept working the decision-makers, sending them articles and writing memos about the benefits of being first. Finally, the top executives saw some concrete advantages and got behind the idea. Europe is now the company’s biggest customer and the company’s improved quality is attracting U.S. business as well.

The company’s increased success sprang from Elena’s self-management. She took it on herself to enhance her value despite her unsupportive manager. She was also spotting opportunities to increase the company’s value. Finally, Elena’s actions point up the interconnectedness of the
work strategies. Her self-management also involved initiative–a willingness to move beyond her narrow job description, beyond even the boss, to reach a goal that benefited everyone. To top things off, she refused to give up.

4. Getting the big picture

Average performers suffer from tunnel vision. They see the world from their viewpoint only and keep pushing the same points over and over again.

Stars, in contrast, step outside their own viewpoint and adopt a variety of perspectives: “How do my customers think about this? What do my competitors think? How about my colleagues? What about top management or the shareholders?” Because they can evaluate the relative importance of a variety of viewpoints, they are able to improve on the product or develop better solutions to problems.

Star perspective grows out of getting enough experience to develop pattern recognition. Sarah took a software development job in Silicon Valley after completing her master’s degree in computer science. During school and on her software designer job, she kept a notebook of
observations on the solutions to common problems.

Every night, she would review the notebook, looking for clues and patterns like another
Sherlock Holmes.

With her combination of practice and experience, she certainly kept up with the other new hires, but what eventually separated her from the pack was her internalized grasp of software and computer logic.

Co-workers were quick to recognize her insightfulness, seeking her help in surmounting their brick walls. Such encounters gave her valuable exposure to problems she would not have faced in her own work.

After her first year, Sarah stunned her colleagues by requesting a transfer to software testing, an assignment often mistakenly considered second-class, a career dead-end. The tester checks on others’ work, to determine if the software does what it should.

There is scant personal satisfaction of the kind that comes from creating new products. Software developers tolerate testers, albeit reluctantly and usually defensively, as the necessary bearers of bad news–identifying bugs and checking for quality.

But Sarah saw the tester job as a chance to understand her work from a fresh and crucial perspective. She would become familiar with a wider
range of problems that could make software fail. She would gain years’ worth of experience in just a year or two. She would collaborate with top customers on building testing programs of relevance to their perspective.

In the process, Sarah would avoid mistakes of substance and perspective in her own future software designing. Testing also opened a window into the perspective of her colleagues. She learned techniques her co-workers used in writing software and corrected flaws found during the
testing process.

When Sarah returned to software development two years later, the testing stint started to pay off. Her colleagues were soon referring to her as the Zen Master of software, and she became known as a leading software guru, helping propel her company to the top in Silicon Valley.

Star performers, like Sarah, who have mastered the nuances of perspective, were not born to the art of it. They seek it out and cultivate its benefits.

5. The right kind of followership

Average performers believe that followership–that is, the relationship with people having organizational authority and power over them–means showing managers and co-workers that they know how to toe the line, take orders without question, and not threaten the leader.

Star producers learn very early the importance of a more positive form of followership, of being a good No. 2–that it is often more important to make the assist than the score. They are actively engaged in helping the organization (and usually the leader) succeed, while exercising
independent, critical judgment about what needs to be done and how to do it. Star followers work cooperatively with a leader to accomplish the organization’s goals even when there are personality or workplace differences.

This finding was surprising since it contradicts what many people think–that a star is always a leader or the center of attention. Often star followers support the leader by alerting him or her to trouble spots, by serving as a thoughtful sounding board, or by challenging the leader’s
decisions.

In many technology companies, a fine line must be walked between what the company believes the customer wants and what the knowledge workers think is best. I often hear bosses complain that their engineers are building a Rolls Royce when the customer only needs a Dodge.

Enamored of their ability to build the best, workers want to attach all the latest bells and whistles, even though this can lead to delays or budget overruns.

In one such exchange, a star engineer at Bell Labs had to confront the boss’s nagging about his extra efforts. The boss wanted to ship a stripped-down call-routing feature for the telephone switch in order to come in ahead of schedule and win points with the customer.

“Forget about all the extras. The customer would rather have a basic model today than the greatest model one month from now,” she said.

Not necessarily, said the star performer, and sat down with her to review the product’s short- and long-term goals for this customer and others in the marketplace.

“Sure, there might be short-term gains with this customer,” said the follower, “but there are risks, too. They may relegate us to the low end of the line when we have staked out the high-end market.

Also, if we do the extra work on this customer’s product now, we’ll save on product
development time for other customers already in the pipeline. But let’s find out what the customer prefers.”

Our star as follower understood the boss’s immediate concerns. At the same time, he tried to shift her perspective to the larger overall goals they shared. When possible, such followers temper their own efforts so that they fall in the range of company objectives–or they find an
organization that is a better match.

6. Teamwork as joint ownership of a project

Average performers think teamwork means working cooperatively with others on a project or problem and doing your part on the team.

Star producers take it to a higher level. They see it as a complex series of skills that involve taking joint “ownership” of goal-setting, group commitments, work activities, schedules, and group accomplishments. It also means being a positive contributor to the group’s dynamics–
helping everyone feel part of the team, dealing with conflict, and assisting others in solving problems.

A medical equipment supplier formed a crisis team because hospitals were furious over recent failures in the companies’ latest critical care monitors. The equipment gave off emergency warnings at random, distressing both patients and the hospital staff who would rush into triage
alert only to find nothing wrong.

The team consisted of professionals from five departments, including production, research, and customer service. Of the group’s seven members, the only star was Aiden, an engineer who had moved into customer service to learn more about that side of the business.

During the third hour of the first team meeting, a heated debate erupted over what action should be taken immediately. Ewing, a 53-year-old production engineer with 25 years of experience at the company, argued for continuing to send repair people to the disaffected hospitals to fix
the machines on site.

But Julie, a recent hire in the research department, argued for following Johnson &amp; Johnson’s lead from the Tylenol disaster–recall all the machines.

The discussion dragged on, with Ewing and Julie getting more heated and less civil. Aiden noticed that he and others were getting frustrated and fidgety. Rather than let the matter go unchecked, he mentioned it, and upon getting nods of agreement from several of the others, he
suggested, “Why don’t we take a 10-minute break, so that we can all take a breather and maybe find a way around this?”

When the meeting resumed, Aiden thought he could break the impasse by asking Julie to present and argue for Ewing’s approach and getting Ewing to argue hers. Although both Julie and Ewing were wary, the tactic defused the mounting tension and anger. Then other group members started to bat ideas around. Eloise, an experienced but shy designer who sat in the corner and had not said a word all day, spoke up in a soft voice: “Since not every hospital is complaining, shouldn’t we first find out why these particular machines are malfunctioning? Either
they’re broken to start with, or something is going on in the hospitals they’re in. So, rather than pull all the machines, maybe we should pull only those having problems and gather information on each setting to see if something there is causing the problem, like a high magnetic field.”

No one commented on her idea and the discussion resumed. After a few minutes, Aiden joined in, saying, “I’m not sure everyone heard Eloise’s suggestion. I think that she might have a way out of this for us. Would you mind repeating it for us?”

With that, Eloise made her point again. Aiden observed that it demonstrated customer responsiveness but was less expensive than a total recall. The rest of the group then supported Eloise’s suggestion to get through the group impasse, and moved on to other topics.

Without Aiden’s intervention, Ewing and Julie might still be fighting, Eloise might never have been heard, and the group might have floundered indefinitely. By going beyond his role as the customer service rep to the team, Aiden was able to improve its effectiveness.

7. Small-l leadership

Average performers are fascinated by leadership with a big L: Big Vision, Big Charisma, Big Success. To them, leadership seems an in-born trait whose owners can flaunt their egos by being in charge, having the power to make most key decisions, and delegating whatever does not interest them.

Star performers, on the other hand, view leadership as a work strategy that builds on expertise and influence to convince a group of people to unite on a substantial task. The undertaking can involve a range of efforts–helping the group create a clear vision of where they want to go
along with the high commitment and trust necessary to get there; finding the resources to accomplish the task; and shepherding the project to successful completion.

We all know very smart people who couldn’t lead a one-car funeral. Other critical skills besides intelligence are involved in leadership with a small l. Small-l leaders understand the human relationships that link people to each other, whereas Big Ls are much too focused on their own
ideas, their own work styles, their own goals. Small-l leaders know they need to take into account the needs, skills, aspirations, and power of their co-workers on a project or team.

This focus outside the self is productive because of a work place reality that Big Ls often overlook. Small-l leaders seldom have formal authority over those they want to lead. Peers will go along only if they believe a member of the group who wants to lead is acting in their
interest as much as his or her own.

Bringing them around requires the kind of interaction that Big Ls believe is a waste of precious leadership time. The small-l leader who bonds with co-worker followers by slogging through the daily project grind and sharing late-night pizzas while meeting deadlines earns more loyalty and credibility than even the most charismatic Big L boss.

The big secret here from our star performers–the secret that separates them from Big Ls and other average-performing leaders–is their refusal to assume they know everything about other people. Most Big L hype portrays the leader as omniscient. The Leader knows what’s best for the
followers and for the situation.

Our star performers make a habit of asking first, even when they think they already know.

Anithia, a U.S.-based software designer for a German-owned business, rarely begins a new
project without testing her assumptions about her co-workers. When assigned to lead six coworkers
in a project to develop a new software program for the Internet, she took time out from the first meeting to ask about work roles and assignments.

“John, during our last project together, you said that you wanted more hardware experience. Is
that still the case? Because this project has a strong hardware component to it.”

Like a perceptive psychologist, Anithia suspended her own assumptions and asked empowering, open-ended questions that got people talking about what skills each brought to the table and what each one wanted from the project. As a result, she was able to match work assignments to individual skills and interests more closely. She wanted to avoid pigeonholing her co-workers, in the way Hollywood producers do when they type-cast actors.

Of course, employees cannot always get everything they want. But with the sincere offer to
listen and the attempt to meet some needs a small-l leader without formal authority wins a lot of influence. Those efforts also provide the firm platform needed when the inevitable stresses hit during the project’s crunch times.

Demonstrated superiority in a technical area may in any case justify some small-l stars in becoming an interim leader. But they know that hierarchy does not extend to the interpersonal side, where instead, they try to create a we’re-all-in-the-trenches-together attitude.

To software designer Anithia, the Internet project in which she acted as small-l leader proved a huge hit with customers. At the annual awards banquet, the president of the North American division praised it as being “vintage Anithia.” Inviting her to the stage, he compared it to other successful projects Anithia had led in the past.

If the company had 500 more like her, he said, domination of the U.S. market would be
assured. Then, he summoned her to the podium to speak.

Like so many self-important actors clutching their Oscars, Anithia could have rushed through the standard nice words about her boss and project members. Instead, she invited them all on stage with her and asked one of them to introduce each member of the group.

Then she stepped to the microphone and said, “This project was the result of our effort; without each person’s contribution, it would not have been the success it is. We were proud of it, and glad that you are, too.” Then they took a collective bow.

8. Street smarts

Average performers focus overly on ingratiating themselves as the surest way to get ahead in the workplace. They also pay obsessive attention to office politics or patronizingly ignore it.

Star producers know that any large organization has legitimate competing interests.

Organizational savvy enables them to steer their way amid these clashes, to promote cooperation, address conflicts, and get things done. It can involve expertise in managing individual or group
dynamics, understanding when to avoid conflicts and when to meet them head on, and knowing how to make allies out of potential enemies.

Remember Sarah, the software-developer star introduced in Strategy No. 4 on perspective [p.54] who volunteered for a stint in the testing section, though her co-workers thought her crazy to do so. She also identified people with whom she would interact in the future and began building working relationships. These organizational bonds not only raised her standing in their eyes, but also smoothed the way for future interactions.

Elena, the star performer from Strategy No. 3, on self-management [p.54], used extensive organizational savvy to focus her company on ISO 9000 and the opportunities presented by the European market. First, she held a brown bag lunch for her colleagues to tell them what she had
learned at a professional conference.

When she became more adept, she offered detailed tutorials. Meanwhile, she sat down with her boss to explain the benefits to the company of the special standards, and quietly lobbied upper management by sending them relevant articles and short memos on the sales and profit potential. Of course, she made sure to ask her boss’s blessing before contacting top executives. She then
trained others in her company in how to bid for European customers.

So while trying to promote her ideas, she was tying them to the company’s critical path and paying attention to organizational protocol.

9. Show and tell

Average performers think Show-and-Tell means getting noticed by upper management through slick presentations, long-winded memos, and public displays of affection for their own work. They focus primarily on their image and their message, not on the audience.

Star producers use a series of skills involving selecting which information to pass on to which others and developing the most effective, userfriendly format for reaching and persuading a specific audience. At its highest level, Show-and-Tell involves selecting either the right
message for a particular audience or the right audience for the particular message.

There is no getting around it. The economy of the 1990s is a tough place for professionals who have trouble presenting their ideas to groups, especially in personal presentations. For most knowledge workers, we’re not talking about big productions, like Bill Gates or Billy Graham
addressing thousands in cavernous convention halls endowed with modern multimedia tools and computer-generated special effects.

Instead, Show-and-Tell denotes small end-of-the-hall conference room presentations to groups of five to 20, with an occasional auditorium presentation thrown in. The audience is co-workers, or upper-level managers, or customers.

The content is usually technical and productrelated.

In the realm of the star producer, though, the process is more sophisticated. From our research, we observed a fine-tuning of Show-and-Tell–from mere transmittal of information points to the sculpting of the message. The stars we observed had mastered the ability to deliver a
message to a targeted audience, to persuade listeners to accept the message, and to be proactive in deflecting criticism.

Where average performers fail most often is in making the leap from the basic dispensing of information to the high level of using the message to influence. Their style and framework of delivery remains the same even though their audiences can differ a lot in makeup.

A labor relations manager for a Fortune 500 corporation did it the right way when he had to reduce health care costs in a new contract to be negotiated with the company’s unions. The plan he developed had to be acceptable to both the top officers of the company and the unions.

His approach was to fashion the same information in radically different ways, first to a small group of lower-ranking union officials in bitesized chunks over a week of meetings on their home turf. He provided them with clear, easy-to-read handouts that could be duplicated and handed out to rank-and-file members with a reasonable chance of being understood quickly.

The presentation’s high point was the message that the union’s agreement to switch over to a managed care program would be balanced by the company’s promise to use the cost savings to
modernize outdated plants, making them competitive and reducing the risk of closings and job losses.

His earlier presentation to the company’s chief executive officer (CEO) and top vice presidents contained fundamentally the same information, but it was packaged quite differently. First, the time window for his presentation was much shorter than that allowed by the unions.

The bulk of his message was delivered in a no-nonsense, well-documented, and detailed report with a persuasive section on recommendations for acceptance. He was able to reinforce his basic message in person in a 1-hour meeting on the company plane with the CEO and the company president.

His position was that if management demanded changes in health care benefits without any creative incentives, the unions would balk and make negotiating a new contract nearly impossible. He noted that the company was just entering on a period of impressive growth and that
stockholders would hardly take kindly to a protracted strike.

While there was criticism of his plan within both camps, the star labor negotiator had laid his groundwork well. In the end, both management and the rank-and-file approved the health care benefits proposal with only minor changes.

Of the many star Show-and-Tell lessons to be learned from this example, the most important is the one that differentiates between Show-and-Tell stars and average presenters: know your audience and shape your message to it.

Meara designs software for the transmission of images–X-rays, electrocardiogram readings, and live closed-circuit TV shots–over phone lines to and from hospital emergency operating rooms. She used a short video clip to start a presentation to emergency room physicians and hospital directors of her team’s latest software design.

The clip showed a car slamming on screeching brakes, the whine of the ambulance siren, a small child being rushed into the emergency room, and a doctor flicking on her company’s equipment saying they only had minutes to save a young life.

“Our work can make the difference in saving this child’s or your child’s life,” Meara told her audience. “Throughout our project, we played this video clip to remind ourselves of the importance of giving it the best we could. Now let me share it with you.”

To compare her software’s effectiveness with that of previous versions, Meara used an electronic timeline accompanied by the thump of a heartbeat as heard in emergency rooms. First, she ran the old software, but as the audience waited for the pulsing images to come up on the screen, the timeline reached its end, the heart stopped beating, and the emergency room alarms went off. With the new software, the images arrived faster and beat the timeline.

Then Meara took the audience through the ups and downs of the project as they tried various solutions to shaving time off the process–what worked, what failed, and why. She wove technical points into the human drama of health professionals working to save peoples’ lives.

Meara hooked her audience by getting them to identify with the terror of their child’s being in a medical emergency and needing her company’s product to work. Then, she dramatically demonstrated the value of the new product.

Becoming a star

We conducted a long-term study evaluating how productive engineers were before and after they had learned star work strategies by going through our productivity improvement program.

Currently called Breakthrough, this program has been taught for the past seven years to over
1000 people in many companies not only in the United States but in Europe as well. It is licensed to professional training companies and is being used in universities both in the classroom and for staff development.

As a basis for our evaluation, we met with managers, star performers, and average workers, asking them to list the factors indicative of increased productivity in a person working in their departments. Several iterations ensured that people who rated highly on these factors were
indeed highly productive.

Then we asked direct managers to rate 300 participants and 300 nonparticipants on this list of productivity factors, once before the training sessions began and a second time eight months after finishing the program.

On the basis of these managerial evaluations, program participants were found to have increased their rate of productivity improvement significantly. The engineers who went through the program solved problems faster, produced higher-quality work, and consistently impressed their customers.

The star strategies program is not a remedial course for poor performers. About 30 percent of the participants taking part in our productivity improvement programs already were wearing the star producer label. Their productivity gains have been similarly impressive.

The most dramatic changes were in the ranks of women and minorities, according to their bosses’ pre- and post-evaluations.

Their productivity improvement rates shot up 400 percent on average.

The success of these groups underscores a key finding in our work. Becoming highly productive does not require magic. When engineers produce at undistinguished levels, it is seldom because they are less capable–it is because they never learned the work strategies that lead to
high productivity. Once these engineers are given access to the star strategies, their productivity takes off.

About the author

Robert E. Kelley teaches at Carnegie Mellon University’s business school, in Pittsburgh. His How to Be A Star at Work: Nine Breakthrough Strategies You Need to Succeed (Times Books, 1998, 1999) has just been updated and released in paperback. His other books include The Gold Collar Worker: Harnessing the Brainpower of the New Workforce. He can be reached by e-mail at Robert@KelleyIdeas.com. More about his ideas is accessible on the World Wide Web at www.kelleyideas.com.

Quiz on ‘Understanding Star Performers’

Individuals who outperform their colleagues by a wide margin are often called “star performers.” How much do you know about these individuals? Are the following statements True or False?
_____1) Star performers are born, not made.
_____2) Star performers are smarter than average performers (have higher IQs, are better problem solvers, or are
more creative).
_____3) Star performers are more driven and ambitious than others.
_____4) Star performers have more leadership skills than others.
_____5) Clean desk people are more likely to be star performers than messy desk people.
_____6) Detailed time management and organizational systems are keys to high productivity.
_____7) Star performers work longer hours and harder than average performers.
_____8) Star performers are more satisfied with their jobs than average performers.
_____9) Star performers are successful primarily because they play organizational politics and give slick
presentations to upper management.
_____10) Minorities and women can seldom be as productive as people who are part of the “old boy” network.
_____11) People cannot sustain a doubled rate of productivity improvement for long time periods.
_____12) I would rather have a team with one star performer supported by four average performers than a team
with five performers who are all in the top 5 percent.

Answers: 1)F; 2)F; 3)F; 4)F; 5)F; 6)F; 7)F; 8)F; 9)F; 10)F; 11)F.
Score: 10 to 11 — you know what leads to star performance
8 to 9 — above average
5 to 7 — average understanding of star performance
0 to 4 — your understanding of what leads to star performance is limited and probably based on unfounded, naïve assumptions

about stars.

Question 12 does not have a right or wrong answer. It does indicate whether you believe in one star to lead to success or in having a group of top performers from which one or more stars may emerge. In today’s highly competitive world, the latter strategy is more likely to give you an edge.

Star Performer productivity is not the result of innate traits–like IQ, personality, or character. Productivity depends on how they do their jobs. The everyday work strategies of the star performers, not gimmicky products or working long hours, make the difference. When certain star performer strategies are systematically integrated into everyday work routines, then productivity improvement rates can double. For those groups excluded from the “old boys”
network, like minorities and women, productivity improvement rates can increase 400 percent.</t>
<t tx="leo.20170826225423.1">http://www.wikihow.com/Be-Street-Smart

How to Be Street Smart

You can learn how to be book smart in school, but even someone with an Ivy League education can still be street foolish. No one learns how to navigate a dangerous neighborhood in the safety of a classroom. Likewise, you won't become street savvy while sitting at a computer and reading an article, but these guidelines are a good start. Note that these tips assume you're in a bad neighborhood where crime is commonplace; applying these steps in the workplace or on a college campus is probably excessive.

Steps

1) Know the neighborhood.

Nothing places a bullseye on your head in a bad neighborhood like looking lost and confused. If you have the chance, research a neighborhood before you enter it. Look at maps and pictures. Know where you're going, and know the streets well enough so that if you get lost, you know how to find your way out without having to look at a map or ask for directions. For instance, in many urban neighborhoods, the streets are arranged in a grid. Knowing something as simple as, "If I keep heading north on Burlington Road, I'll hit Highway 201," may be enough. Even if you are lost, pretend you know where you're going.

A person who isn't street smart might say "Ugh! This is too paranoid. I can just find a gas station or store and ask for directions." Rest assured, there are neighborhoods where you might not find a "safe haven" or you might find some shady characters inside, who've taken a keen interest in your wallet.

Don't go into an unfamiliar neighborhood without a full tank of gas. In fact, if there's even a chance of getting lost or running into traffic delays, never let your gas tank go below half full.

Learn everything you can about the public transportation system, if there is one. You might need to use it. Understand how the routes and fares work. Be sure you know the places and hours that attendants or guards are available, the safest places to wait for your ride and how to summon help if you need it. A train, subway, ferry or bus station can be a dangerous place late at night, and not knowing what you're doing will make the situation more dangerous.

2) Dress to blend in. 

Even if you look different, keeping your clothing understated can go a very long way. This is not the time to look glamorous or unique. See what people your age usually wear in the region and copy them. Don't wear flashy jewelry or bright colors. In some places, certain colors like excessive red or blue are associated with gangs. And, if you're a woman, the most practical advice is don't look pretty. Yes, it's a shame that you should have to suppress your individuality, but let's face it, individuality draws attention, and that's not something you want in a dangerous neighborhood.

3) Act like nothing's a big deal. 

You have to be paranoid enough to be alert to dangerous situations and interactions, but you have to pretend to be nonchalant. For instance, if you're in a grocery store and a very intoxicated person bursts in, yelling and waving a fist, what do you do? If you're street smart, you notice and you casually go about your business, making your way out of the store without drawing attention to yourself. Someone who's not street smart might stare, might rush out of the store, or might even try to help the person (which is a "Good Samaritan" thing to do, but not a street smart thing to do—sometimes the two are mutually exclusive).
Don't look up. Your attention might be drawn to tall buildings or trains running overhead, but it's one of those things that people living in a city don't notice.
Be quiet. Don't laugh, don't giggle, don't raise your voice to get the attention of someone across the street.

4) Avoid contact. 

This is tricky. If you're walking towards a person or a group of people who are checking you (or your companion[s]) out, try to walk in a different direction to avoid them altogether. Don't make it obvious, though—if you cross the street, for example, go into a store on that side so it seems that's why you crossed. Remember, you want to avoid dangerous situations, but you don't want to come off as paranoid or scared. At the very least, be alert so you can spot a potential confrontation early enough to cross the street without making it clear to them that you're intimidated.

If you do have to cross paths with shady characters, however, don't quicken your pace (you might do it subconsciously). Pretend to be on a call or send a text message as you walk by, unless you have a really nice phone.
If you're walking with someone, don't let your conversation get quiet right when you walk by—that can increase tension. Keep the conversation flowing, and avoid topics that might indicate where you're going, where you're from, or what kind of stuff you have.

5) If you make eye contact with someone, don't look away suddenly; look away slowly and casually. Think about how you make eye contact in a neighborhood where you feel safe. You don't shift your eye contact away in a big rush, do you? At the same time, you don't want to hold eye contact for too long, or else you might invite a confrontation. Or an advance. Don't stare, and if you make and hold eye contact, a friendly smile and nod of acknowledgment may reduce the tension of any perceived challenge.

6) If someone says something friendly, Be Polite but brief. If you walk by someone who asks, "How's your day going, man?", reply, "It's going well. Thanks." Nod in their direction when you say "thanks," but keep walking. Don't say anything that invites further conversation, such as, "Good. What about yours?" Some people are genuinely being friendly, but other people have bad intentions; this is not the place to learn the difference. If you're a woman and the person being friendly is a man, you might want to be even more terse. Say, "Fine, thanks," and don't smile.

7) If someone confronts you, stay calm and try not to be or look afraid.

Observe your surroundings, and start looking for possible help (other pedestrians that look friendly, a place of business that is open, maybe even a police car approaching). If no such help is available, be prepared to defend yourself. Start by memorizing their face, ethnicity, height (compare it to your own), age and any odd marks or tattoos. They may try to take you somewhere less public. Do not follow them into a secluded area even if they have a gun. You have a better chance to survive if you stay put. If they try to take you by force, scream, kick, punch, bite. If they have a gun and all they want is your wallet or valuables, give it to them. Don't try to be a hero, it's not worth your life. Call the cops as soon as you're able to and explain the "who, what, where, when and how".
</t>
<t tx="leo.20170826232701.1">http://www.fossil-scm.org/index.html/doc/trunk/www/embeddeddoc.wiki

將 pelican 所產生的靜態網頁推送到 Fossil 倉儲, 然後以 /doc/trunk/blog/index.html 呼叫

doc 表示要將內容以 document 方式顯示, trunk 表示為該目錄下的最新版本, 若要擷取歷史版本, 將 trunk 換為版本號</t>
<t tx="leo.20170827171251.1">python -m pip install pypiwin32
python -m pip install kivy.deps.sdl2
python -m pip install kivy.deps.glew

安裝後可以正確在 Win 7 啟動視窗

參考: https://github.com/kivy/kivy/issues/1355</t>
<t tx="leo.20170827174034.1"># source: https://kivy.org/docs/tutorials/pong.html
from kivy.app import App
from kivy.uix.widget import Widget
from kivy.properties import NumericProperty, ReferenceListProperty,\
    ObjectProperty
from kivy.vector import Vector
from kivy.clock import Clock


class PongPaddle(Widget):
    score = NumericProperty(0)

    def bounce_ball(self, ball):
        if self.collide_widget(ball):
            vx, vy = ball.velocity
            offset = (ball.center_y - self.center_y) / (self.height / 2)
            bounced = Vector(-1 * vx, vy)
            vel = bounced * 1.1
            ball.velocity = vel.x, vel.y + offset


class PongBall(Widget):
    velocity_x = NumericProperty(0)
    velocity_y = NumericProperty(0)
    velocity = ReferenceListProperty(velocity_x, velocity_y)

    def move(self):
        self.pos = Vector(*self.velocity) + self.pos


class PongGame(Widget):
    ball = ObjectProperty(None)
    player1 = ObjectProperty(None)
    player2 = ObjectProperty(None)

    def serve_ball(self, vel=(4, 0)):
        self.ball.center = self.center
        self.ball.velocity = vel

    def update(self, dt):
        self.ball.move()

        # bounce of paddles
        self.player1.bounce_ball(self.ball)
        self.player2.bounce_ball(self.ball)

        # bounce ball off bottom or top
        if (self.ball.y &lt; self.y) or (self.ball.top &gt; self.top):
            self.ball.velocity_y *= -1

        # went of to a side to score point?
        if self.ball.x &lt; self.x:
            self.player2.score += 1
            self.serve_ball(vel=(4, 0))
        if self.ball.x &gt; self.width:
            self.player1.score += 1
            self.serve_ball(vel=(-4, 0))

    def on_touch_move(self, touch):
        if touch.x &lt; self.width / 3:
            self.player1.center_y = touch.y
        if touch.x &gt; self.width - self.width / 3:
            self.player2.center_y = touch.y


class PongApp(App):
    def build(self):
        game = PongGame()
        game.serve_ball()
        Clock.schedule_interval(game.update, 1.0 / 60.0)
        return game


if __name__ == '__main__':
    PongApp().run()</t>
<t tx="leo.20170827174103.1">#:kivy 1.0.9

&lt;PongBall&gt;:
    size: 50, 50 
    canvas:
        Ellipse:
            pos: self.pos
            size: self.size          

&lt;PongPaddle&gt;:
    size: 25, 200
    canvas:
        Rectangle:
            pos:self.pos
            size:self.size

&lt;PongGame&gt;:
    ball: pong_ball
    player1: player_left
    player2: player_right
    
    canvas:
        Rectangle:
            pos: self.center_x-5, 0
            size: 10, self.height
    
    Label:
        font_size: 70  
        center_x: root.width / 4
        top: root.top - 50
        text: str(root.player1.score)
        
    Label:
        font_size: 70  
        center_x: root.width * 3 / 4
        top: root.top - 50
        text: str(root.player2.score)
    
    PongBall:
        id: pong_ball
        center: self.parent.center
        
    PongPaddle:
        id: player_left
        x: root.x
        center_y: root.center_y
        
    PongPaddle:
        id: player_right
        x: root.width-self.width
        center_y: root.center_y</t>
<t tx="leo.20170901235244.1"></t>
<t tx="leo.20170908162839.1"></t>
<t tx="leo.20170908162904.1"></t>
<t tx="leo.20170916092621.1"></t>
<t tx="leo.20171001091537.1"></t>
<t tx="leo.20171025093610.1"></t>
<t tx="leo.20171025164948.1"></t>
<t tx="leo.20180115093448.1"></t>
<t tx="leo.20180115093726.1"></t>
<t tx="leo.20180115115910.1"></t>
<t tx="leo.20180115141411.1">採用　attila theme

syntaxhighlighter 採用 3.0.83 舊版

mathjax 採用最新版本 2.7.2

重新改寫 .md 檔案, 採用 []: url 引用網址資料, 以單 $ 引用數學符號, 以 $$ 引用方程式

以 &lt;pre class="brush: python"&lt;/&gt; &lt;/pre&gt; 引用程式碼</t>
<t tx="leo.20180115142025.1"></t>
<t tx="yen.20170108171605.1"></t>
<t tx="yen.20170108171605.2">QTreeWidget {
    /* These apply to the selected item, but not to editing items.*/
    background-color: #ffffec; /* Leo's traditional tree color */
    selection-color: black; /* was white */
    selection-background-color: lightgrey;
    /* font-family: SansSerif; */
    /*font-family: DejaVu Sans Mono;*/
    font-family:YaHei Mono;
    /* 標題字型大小設定 */
    font-size: 20px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal, italic,oblique */
 }

/* Headline edit widgets */
QTreeWidget QLineEdit {
    background-color: cornsilk;
    selection-color: white;
    selection-background-color: blue;
    /*font-family: DejaVu Sans Mono;*/    
    font-family:YaHei Mono;
    /* 沒有特別對應字型大小 */
    font-size: 20px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal, italic,oblique */
}

/* The log panes */
QTextEdit {
    background-color: #f2fdff;
    selection-color: red;
    selection-background-color: blue;
    /* font-family: Courier New; */
    font-family:YaHei Mono;
    /* log font 大小 */
    font-size: 20px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal, italic,oblique */
}

/* The body pane */
QTextEdit#richTextEdit {
    background-color: #fdf5f5; /* A kind of pink. */
    selection-color: white;
    selection-background-color: red;
    /*font-family: DejaVu Sans Mono;*/
    /* font-family: Courier New; */
    font-family:YaHei Mono;
    /* 內文字型大小 */
    font-size: 20px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal,italic,oblique */
}

QLabel {
    font-family:YaHei Mono;'CherryPy', 'pytz', 'mako', 'beautifulsoup4', 'pymysql', 'peewee'
    /* 下方的 Minibuffer 標題字型大小 */
    font-size: 20px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal,italic,oblique */
}

/* Editor labels */
QLineEdit#editorLabel {
    background-color: #ffffec;
    font-family:YaHei Mono;
    /* 沒有直接對應字型大小 */
    font-size: 20px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal,italic,oblique */
    border: 2px;
    margin: 2px;
}</t>
<t tx="yen.20170108171605.3">horizontal: body pane to the left
vertical: body pane on the botton</t>
<t tx="yen.20170108171622.1">有關 kmolab.github.io

倉儲位置: https://github.com/kmolab.github.io

每一協同成員都應該要在 users 目錄下有一個 Leo 檔案

</t>
<t tx="yen.20170108171733.1"></t>
<t tx="yen.20170108171733.2">@language python
import os

os.system("pelican content -o blog -s local_publishconf.py")
g.es("admin pelican 近端執行完畢")


</t>
<t tx="yen.20170108171733.5"></t>
<t tx="yen.20170108171733.71"></t>
<t tx="yen.20170108171733.81"></t>
<t tx="yen.20170108171733.83">sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout localhost.key -out localhost.crt

</t>
<t tx="yen.20170108171930.1">@language python
import os
import subprocess
import threading
import http.server, ssl

def domake():
    # build directory
    os.chdir("./../")
    server_address = ('localhost', 5443)
    httpd = http.server.HTTPServer(server_address, http.server.SimpleHTTPRequestHandler)
    httpd.socket = ssl.wrap_socket(httpd.socket,
                                   server_side=True,
                                   certfile='localhost.crt',
                                   keyfile='localhost.key',
                                   ssl_version=ssl.PROTOCOL_TLSv1)
    print(os.getcwd())
    print("5443 https server started")
    httpd.serve_forever()

# 利用執行緒執行 https 伺服器
make = threading.Thread(target=domake)
make.start()</t>
<t tx="yen.20170108171939.1">@language python
import os
import subprocess
import threading
import socket
import http.server, ssl

class HTTPServerV6(http.server.HTTPServer):
    address_family = socket.AF_INET6
  
def domake():
    # build directory
    os.chdir("./../")
    ipv6_address = '::1'
    server_address = (ipv6_address, 6443)
    #httpd = http.server.HTTPServer(server_address, http.server.SimpleHTTPRequestHandler)
    httpd = HTTPServerV6(server_address, http.server.SimpleHTTPRequestHandler)
    httpd.socket = ssl.wrap_socket(httpd.socket,
                                   server_side=True,
                                   certfile='localhost.crt',
                                   keyfile='localhost.key',
                                   ssl_version=ssl.PROTOCOL_TLSv1)
    print("6443 https server started")
    httpd.serve_forever()

# 利用執行緒執行 https 伺服器
make = threading.Thread(target=domake)
make.start()</t>
<t tx="yen.20170224232341.1"></t>
<t tx="yen.20170224232341.2"></t>
<t tx="yen.20170731134418.1"></t>
</tnodes>
</leo_file>
